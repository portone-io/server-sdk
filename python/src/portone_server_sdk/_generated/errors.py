from __future__ import annotations
from dataclasses import InitVar, dataclass, field
from typing import Optional
from .b2b.tax_invoice.b2b_bulk_tax_invoice_not_found_error import B2bBulkTaxInvoiceNotFoundError as InternalB2bBulkTaxInvoiceNotFoundError
from .common.b2b_external_service_error import B2bExternalServiceError as InternalB2bExternalServiceError
from .common.b2b_not_enabled_error import B2bNotEnabledError as InternalB2bNotEnabledError
from .common.forbidden_error import ForbiddenError as InternalForbiddenError
from .common.invalid_request_error import InvalidRequestError as InternalInvalidRequestError
from .common.unauthorized_error import UnauthorizedError as InternalUnauthorizedError
from .b2b.tax_invoice.b2b_cannot_change_tax_type_error import B2BCannotChangeTaxTypeError as InternalB2BCannotChangeTaxTypeError
from .b2b.tax_invoice.b2b_document_key_cannot_be_changed_error import B2bDocumentKeyCannotBeChangedError as InternalB2bDocumentKeyCannotBeChangedError
from .b2b.tax_invoice.b2b_id_already_exists_error import B2bIdAlreadyExistsError as InternalB2bIdAlreadyExistsError
from .b2b.tax_invoice.b2b_issuance_type_mismatch_error import B2bIssuanceTypeMismatchError as InternalB2bIssuanceTypeMismatchError
from .b2b.tax_invoice.b2b_modification_not_provided_error import B2bModificationNotProvidedError as InternalB2bModificationNotProvidedError
from .b2b.tax_invoice.b2b_original_tax_invoice_not_found_error import B2bOriginalTaxInvoiceNotFoundError as InternalB2bOriginalTaxInvoiceNotFoundError
from .b2b.tax_invoice.b2b_recipient_not_found_error import B2bRecipientNotFoundError as InternalB2bRecipientNotFoundError
from .b2b.tax_invoice.b2b_supplier_not_found_error import B2bSupplierNotFoundError as InternalB2bSupplierNotFoundError
from .b2b.tax_invoice.b2b_tax_invoice_not_drafted_status_error import B2bTaxInvoiceNotDraftedStatusError as InternalB2bTaxInvoiceNotDraftedStatusError
from .b2b.tax_invoice.b2b_tax_invoice_not_found_error import B2bTaxInvoiceNotFoundError as InternalB2bTaxInvoiceNotFoundError
from .b2b.tax_invoice.b2b_tax_invoice_recipient_document_key_already_used_error import B2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError as InternalB2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError
from .b2b.tax_invoice.b2b_tax_invoice_status_not_sending_completed_error import B2BTaxInvoiceStatusNotSendingCompletedError as InternalB2BTaxInvoiceStatusNotSendingCompletedError
from .b2b.tax_invoice.b2b_tax_invoice_supplier_document_key_already_used_error import B2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError as InternalB2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError
from .b2b.tax_invoice.b2b_file_not_found_error import B2bFileNotFoundError as InternalB2bFileNotFoundError
from .b2b.tax_invoice.b2b_tax_invoice_attachment_not_found_error import B2bTaxInvoiceAttachmentNotFoundError as InternalB2bTaxInvoiceAttachmentNotFoundError
from .b2b.tax_invoice.b2b_tax_invoice_not_issued_status_error import B2bTaxInvoiceNotIssuedStatusError as InternalB2bTaxInvoiceNotIssuedStatusError
from .b2b.tax_invoice.b2b_tax_invoice_not_requested_status_error import B2bTaxInvoiceNotRequestedStatusError as InternalB2bTaxInvoiceNotRequestedStatusError
from .b2b.tax_invoice.b2b_tax_invoice_no_recipient_document_key_error import B2bTaxInvoiceNoRecipientDocumentKeyError as InternalB2bTaxInvoiceNoRecipientDocumentKeyError
from .b2b.tax_invoice.b2b_tax_invoice_no_supplier_document_key_error import B2bTaxInvoiceNoSupplierDocumentKeyError as InternalB2bTaxInvoiceNoSupplierDocumentKeyError
from .b2b.tax_invoice.b2b_tax_invoice_non_deletable_status_error import B2bTaxInvoiceNonDeletableStatusError as InternalB2bTaxInvoiceNonDeletableStatusError
from .platform.platform_not_enabled_error import PlatformNotEnabledError as InternalPlatformNotEnabledError
from .platform.platform_additional_fee_policy_not_found_error import PlatformAdditionalFeePolicyNotFoundError as InternalPlatformAdditionalFeePolicyNotFoundError
from .platform.platform_additional_fee_policy_schedule_already_exists_error import PlatformAdditionalFeePolicyScheduleAlreadyExistsError as InternalPlatformAdditionalFeePolicyScheduleAlreadyExistsError
from .platform.platform_archived_additional_fee_policy_error import PlatformArchivedAdditionalFeePolicyError as InternalPlatformArchivedAdditionalFeePolicyError
from .platform.platform_contract_not_found_error import PlatformContractNotFoundError as InternalPlatformContractNotFoundError
from .platform.platform_archived_contract_error import PlatformArchivedContractError as InternalPlatformArchivedContractError
from .platform.platform_contract_schedule_already_exists_error import PlatformContractScheduleAlreadyExistsError as InternalPlatformContractScheduleAlreadyExistsError
from .platform.platform_discount_share_policy_not_found_error import PlatformDiscountSharePolicyNotFoundError as InternalPlatformDiscountSharePolicyNotFoundError
from .platform.platform_archived_discount_share_policy_error import PlatformArchivedDiscountSharePolicyError as InternalPlatformArchivedDiscountSharePolicyError
from .platform.platform_discount_share_policy_schedule_already_exists_error import PlatformDiscountSharePolicyScheduleAlreadyExistsError as InternalPlatformDiscountSharePolicyScheduleAlreadyExistsError
from .platform.platform_archived_partners_cannot_be_scheduled_error import PlatformArchivedPartnersCannotBeScheduledError as InternalPlatformArchivedPartnersCannotBeScheduledError
from .platform.platform_member_company_connected_partners_cannot_be_scheduled_error import PlatformMemberCompanyConnectedPartnersCannotBeScheduledError as InternalPlatformMemberCompanyConnectedPartnersCannotBeScheduledError
from .platform.platform_partner_schedules_already_exist_error import PlatformPartnerSchedulesAlreadyExistError as InternalPlatformPartnerSchedulesAlreadyExistError
from .platform.platform_user_defined_property_not_found_error import PlatformUserDefinedPropertyNotFoundError as InternalPlatformUserDefinedPropertyNotFoundError
from .platform.platform_partner_not_found_error import PlatformPartnerNotFoundError as InternalPlatformPartnerNotFoundError
from .platform.platform_member_company_connected_partner_cannot_be_scheduled_error import PlatformMemberCompanyConnectedPartnerCannotBeScheduledError as InternalPlatformMemberCompanyConnectedPartnerCannotBeScheduledError
from .platform.platform_account_verification_already_used_error import PlatformAccountVerificationAlreadyUsedError as InternalPlatformAccountVerificationAlreadyUsedError
from .platform.platform_account_verification_failed_error import PlatformAccountVerificationFailedError as InternalPlatformAccountVerificationFailedError
from .platform.platform_account_verification_not_found_error import PlatformAccountVerificationNotFoundError as InternalPlatformAccountVerificationNotFoundError
from .platform.platform_archived_partner_error import PlatformArchivedPartnerError as InternalPlatformArchivedPartnerError
from .platform.platform_company_verification_already_used_error import PlatformCompanyVerificationAlreadyUsedError as InternalPlatformCompanyVerificationAlreadyUsedError
from .platform.platform_insufficient_data_to_change_partner_type_error import PlatformInsufficientDataToChangePartnerTypeError as InternalPlatformInsufficientDataToChangePartnerTypeError
from .platform.platform_member_company_connected_partner_brn_unchangeable_error import PlatformMemberCompanyConnectedPartnerBrnUnchangeableError as InternalPlatformMemberCompanyConnectedPartnerBrnUnchangeableError
from .platform.platform_member_company_connected_partner_type_unchangeable_error import PlatformMemberCompanyConnectedPartnerTypeUnchangeableError as InternalPlatformMemberCompanyConnectedPartnerTypeUnchangeableError
from .platform.platform_partner_schedule_already_exists_error import PlatformPartnerScheduleAlreadyExistsError as InternalPlatformPartnerScheduleAlreadyExistsError
from .platform.company.platform_company_not_found_error import PlatformCompanyNotFoundError as InternalPlatformCompanyNotFoundError
from .platform.platform_external_api_failed_error import PlatformExternalApiFailedError as InternalPlatformExternalApiFailedError
from .platform.policy.platform_additional_fee_policy_already_exists_error import PlatformAdditionalFeePolicyAlreadyExistsError as InternalPlatformAdditionalFeePolicyAlreadyExistsError
from .platform.policy.platform_cannot_archive_scheduled_additional_fee_policy_error import PlatformCannotArchiveScheduledAdditionalFeePolicyError as InternalPlatformCannotArchiveScheduledAdditionalFeePolicyError
from .platform.policy.platform_contract_already_exists_error import PlatformContractAlreadyExistsError as InternalPlatformContractAlreadyExistsError
from .platform.policy.platform_cannot_archive_scheduled_contract_error import PlatformCannotArchiveScheduledContractError as InternalPlatformCannotArchiveScheduledContractError
from .platform.policy.platform_discount_share_policy_already_exists_error import PlatformDiscountSharePolicyAlreadyExistsError as InternalPlatformDiscountSharePolicyAlreadyExistsError
from .platform.policy.platform_cannot_archive_scheduled_discount_share_policy_error import PlatformCannotArchiveScheduledDiscountSharePolicyError as InternalPlatformCannotArchiveScheduledDiscountSharePolicyError
from .platform.account.platform_external_api_temporarily_failed_error import PlatformExternalApiTemporarilyFailedError as InternalPlatformExternalApiTemporarilyFailedError
from .platform.account.platform_not_supported_bank_error import PlatformNotSupportedBankError as InternalPlatformNotSupportedBankError
from .platform.platform_currency_not_supported_error import PlatformCurrencyNotSupportedError as InternalPlatformCurrencyNotSupportedError
from .platform.partner.platform_partner_id_already_exists_error import PlatformPartnerIdAlreadyExistsError as InternalPlatformPartnerIdAlreadyExistsError
from .platform.partner.platform_contracts_not_found_error import PlatformContractsNotFoundError as InternalPlatformContractsNotFoundError
from .platform.partner.platform_partner_ids_already_exist_error import PlatformPartnerIdsAlreadyExistError as InternalPlatformPartnerIdsAlreadyExistError
from .platform.partner.platform_partner_ids_duplicated_error import PlatformPartnerIdsDuplicatedError as InternalPlatformPartnerIdsDuplicatedError
from .platform.partner.platform_btx_not_enabled_error import PlatformBtxNotEnabledError as InternalPlatformBtxNotEnabledError
from .platform.partner.platform_target_partner_not_found_error import PlatformTargetPartnerNotFoundError as InternalPlatformTargetPartnerNotFoundError
from .platform.partner.platform_member_company_not_connectable_status_error import PlatformMemberCompanyNotConnectableStatusError as InternalPlatformMemberCompanyNotConnectableStatusError
from .platform.partner.platform_partner_schedule_exists_error import PlatformPartnerScheduleExistsError as InternalPlatformPartnerScheduleExistsError
from .platform.partner.platform_partner_taxation_type_is_simple_error import PlatformPartnerTaxationTypeIsSimpleError as InternalPlatformPartnerTaxationTypeIsSimpleError
from .platform.partner.platform_partner_type_is_not_business_error import PlatformPartnerTypeIsNotBusinessError as InternalPlatformPartnerTypeIsNotBusinessError
from .platform.partner.platform_member_company_not_connected_error import PlatformMemberCompanyNotConnectedError as InternalPlatformMemberCompanyNotConnectedError
from .platform.partner.platform_ongoing_tax_invoice_exists_error import PlatformOngoingTaxInvoiceExistsError as InternalPlatformOngoingTaxInvoiceExistsError
from .platform.partner.platform_cannot_archive_scheduled_partner_error import PlatformCannotArchiveScheduledPartnerError as InternalPlatformCannotArchiveScheduledPartnerError
from .platform.transfer.platform_additional_fee_policies_not_found_error import PlatformAdditionalFeePoliciesNotFoundError as InternalPlatformAdditionalFeePoliciesNotFoundError
from .platform.transfer.platform_additional_fixed_amount_fee_currency_and_settlement_currency_mismatched_error import PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError as InternalPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
from .platform.transfer.platform_contract_platform_fixed_amount_fee_currency_and_settlement_currency_mismatched_error import PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError as InternalPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
from .platform.transfer.platform_discount_share_policies_not_found_error import PlatformDiscountSharePoliciesNotFoundError as InternalPlatformDiscountSharePoliciesNotFoundError
from .platform.transfer.platform_payment_not_found_error import PlatformPaymentNotFoundError as InternalPlatformPaymentNotFoundError
from .platform.transfer.platform_product_id_duplicated_error import PlatformProductIdDuplicatedError as InternalPlatformProductIdDuplicatedError
from .platform.transfer.platform_settlement_amount_exceeded_error import PlatformSettlementAmountExceededError as InternalPlatformSettlementAmountExceededError
from .platform.transfer.platform_settlement_date_earlier_than_settlement_start_date_error import PlatformSettlementDateEarlierThanSettlementStartDateError as InternalPlatformSettlementDateEarlierThanSettlementStartDateError
from .platform.transfer.platform_settlement_parameter_not_found_error import PlatformSettlementParameterNotFoundError as InternalPlatformSettlementParameterNotFoundError
from .platform.transfer.platform_settlement_payment_amount_exceeded_port_one_payment_error import PlatformSettlementPaymentAmountExceededPortOnePaymentError as InternalPlatformSettlementPaymentAmountExceededPortOnePaymentError
from .platform.transfer.platform_settlement_supply_with_vat_amount_exceeded_port_one_payment_error import PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError as InternalPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError
from .platform.transfer.platform_settlement_tax_free_amount_exceeded_port_one_payment_error import PlatformSettlementTaxFreeAmountExceededPortOnePaymentError as InternalPlatformSettlementTaxFreeAmountExceededPortOnePaymentError
from .platform.transfer.platform_transfer_already_exists_error import PlatformTransferAlreadyExistsError as InternalPlatformTransferAlreadyExistsError
from .platform.transfer.platform_cancellable_amount_exceeded_error import PlatformCancellableAmountExceededError as InternalPlatformCancellableAmountExceededError
from .platform.transfer.platform_cancellable_discount_amount_exceeded_error import PlatformCancellableDiscountAmountExceededError as InternalPlatformCancellableDiscountAmountExceededError
from .platform.transfer.platform_cancellable_discount_tax_free_amount_exceeded_error import PlatformCancellableDiscountTaxFreeAmountExceededError as InternalPlatformCancellableDiscountTaxFreeAmountExceededError
from .platform.transfer.platform_cancellable_product_quantity_exceeded_error import PlatformCancellableProductQuantityExceededError as InternalPlatformCancellableProductQuantityExceededError
from .platform.transfer.platform_cancellation_and_payment_type_mismatched_error import PlatformCancellationAndPaymentTypeMismatchedError as InternalPlatformCancellationAndPaymentTypeMismatchedError
from .platform.transfer.platform_cancellation_not_found_error import PlatformCancellationNotFoundError as InternalPlatformCancellationNotFoundError
from .platform.transfer.platform_cannot_specify_transfer_error import PlatformCannotSpecifyTransferError as InternalPlatformCannotSpecifyTransferError
from .platform.transfer.platform_discount_share_policy_id_duplicated_error import PlatformDiscountSharePolicyIdDuplicatedError as InternalPlatformDiscountSharePolicyIdDuplicatedError
from .platform.transfer.platform_order_detail_mismatched_error import PlatformOrderDetailMismatchedError as InternalPlatformOrderDetailMismatchedError
from .platform.transfer.platform_order_transfer_already_cancelled_error import PlatformOrderTransferAlreadyCancelledError as InternalPlatformOrderTransferAlreadyCancelledError
from .platform.transfer.platform_product_id_not_found_error import PlatformProductIdNotFoundError as InternalPlatformProductIdNotFoundError
from .platform.transfer.platform_settlement_cancel_amount_exceeded_port_one_cancel_error import PlatformSettlementCancelAmountExceededPortOneCancelError as InternalPlatformSettlementCancelAmountExceededPortOneCancelError
from .platform.transfer.platform_transfer_discount_share_policy_not_found_error import PlatformTransferDiscountSharePolicyNotFoundError as InternalPlatformTransferDiscountSharePolicyNotFoundError
from .platform.transfer.platform_transfer_not_found_error import PlatformTransferNotFoundError as InternalPlatformTransferNotFoundError
from .platform.transfer.platform_cancel_order_transfers_exists_error import PlatformCancelOrderTransfersExistsError as InternalPlatformCancelOrderTransfersExistsError
from .platform.transfer.platform_transfer_non_deletable_status_error import PlatformTransferNonDeletableStatusError as InternalPlatformTransferNonDeletableStatusError
from .payment.already_paid_error import AlreadyPaidError as InternalAlreadyPaidError
from .common.billing_key_already_deleted_error import BillingKeyAlreadyDeletedError as InternalBillingKeyAlreadyDeletedError
from .common.billing_key_not_found_error import BillingKeyNotFoundError as InternalBillingKeyNotFoundError
from .common.channel_not_found_error import ChannelNotFoundError as InternalChannelNotFoundError
from .payment.discount_amount_exceeds_total_amount_error import DiscountAmountExceedsTotalAmountError as InternalDiscountAmountExceedsTotalAmountError
from .common.max_transaction_count_reached_error import MaxTransactionCountReachedError as InternalMaxTransactionCountReachedError
from .common.payment_schedule_already_exists_error import PaymentScheduleAlreadyExistsError as InternalPaymentScheduleAlreadyExistsError
from .common.pg_provider_error import PgProviderError as InternalPgProviderError
from .payment.promotion_pay_method_does_not_match_error import PromotionPayMethodDoesNotMatchError as InternalPromotionPayMethodDoesNotMatchError
from .common.sum_of_parts_exceeds_total_amount_error import SumOfPartsExceedsTotalAmountError as InternalSumOfPartsExceedsTotalAmountError
from .payment.cancellable_amount_consistency_broken_error import CancellableAmountConsistencyBrokenError as InternalCancellableAmountConsistencyBrokenError
from .payment.cancel_amount_exceeds_cancellable_amount_error import CancelAmountExceedsCancellableAmountError as InternalCancelAmountExceedsCancellableAmountError
from .payment.cancel_tax_amount_exceeds_cancellable_tax_amount_error import CancelTaxAmountExceedsCancellableTaxAmountError as InternalCancelTaxAmountExceedsCancellableTaxAmountError
from .payment.cancel_tax_free_amount_exceeds_cancellable_tax_free_amount_error import CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError as InternalCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError
from .payment.negative_promotion_adjusted_cancel_amount_error import NegativePromotionAdjustedCancelAmountError as InternalNegativePromotionAdjustedCancelAmountError
from .payment.payment_already_cancelled_error import PaymentAlreadyCancelledError as InternalPaymentAlreadyCancelledError
from .payment.payment_not_found_error import PaymentNotFoundError as InternalPaymentNotFoundError
from .payment.payment_not_paid_error import PaymentNotPaidError as InternalPaymentNotPaidError
from .payment.promotion_discount_retain_option_should_not_be_changed_error import PromotionDiscountRetainOptionShouldNotBeChangedError as InternalPromotionDiscountRetainOptionShouldNotBeChangedError
from .payment.sum_of_parts_exceeds_cancel_amount_error import SumOfPartsExceedsCancelAmountError as InternalSumOfPartsExceedsCancelAmountError
from .common.information_mismatch_error import InformationMismatchError as InternalInformationMismatchError
from .payment.invalid_payment_token_error import InvalidPaymentTokenError as InternalInvalidPaymentTokenError
from .payment.max_webhook_retry_count_reached_error import MaxWebhookRetryCountReachedError as InternalMaxWebhookRetryCountReachedError
from .payment.webhook_not_found_error import WebhookNotFoundError as InternalWebhookNotFoundError
from .payment.payment_not_waiting_for_deposit_error import PaymentNotWaitingForDepositError as InternalPaymentNotWaitingForDepositError
from .payment.billing_key.channel_specific_error import ChannelSpecificError as InternalChannelSpecificError
from .payment.billing_key.billing_key_already_issued_error import BillingKeyAlreadyIssuedError as InternalBillingKeyAlreadyIssuedError
from .payment.billing_key.billing_key_not_issued_error import BillingKeyNotIssuedError as InternalBillingKeyNotIssuedError
from .payment.cash_receipt.cash_receipt_already_issued_error import CashReceiptAlreadyIssuedError as InternalCashReceiptAlreadyIssuedError
from .payment.cash_receipt.cash_receipt_not_found_error import CashReceiptNotFoundError as InternalCashReceiptNotFoundError
from .payment.cash_receipt.cash_receipt_not_issued_error import CashReceiptNotIssuedError as InternalCashReceiptNotIssuedError
from .payment.payment_schedule.payment_schedule_not_found_error import PaymentScheduleNotFoundError as InternalPaymentScheduleNotFoundError
from .payment.payment_schedule.payment_schedule_already_processed_error import PaymentScheduleAlreadyProcessedError as InternalPaymentScheduleAlreadyProcessedError
from .payment.payment_schedule.payment_schedule_already_revoked_error import PaymentScheduleAlreadyRevokedError as InternalPaymentScheduleAlreadyRevokedError
from .payment.payment_schedule.already_paid_or_waiting_error import AlreadyPaidOrWaitingError as InternalAlreadyPaidOrWaitingError
from .payment.promotion.promotion_not_found_error import PromotionNotFoundError as InternalPromotionNotFoundError
from .identity_verification.identity_verification_already_verified_error import IdentityVerificationAlreadyVerifiedError as InternalIdentityVerificationAlreadyVerifiedError
from .identity_verification.identity_verification_not_found_error import IdentityVerificationNotFoundError as InternalIdentityVerificationNotFoundError
from .identity_verification.identity_verification_not_sent_error import IdentityVerificationNotSentError as InternalIdentityVerificationNotSentError
from .identity_verification.identity_verification_already_sent_error import IdentityVerificationAlreadySentError as InternalIdentityVerificationAlreadySentError
from .auth.errors.login_via_api_secret_error import LoginViaApiSecretError
from .auth.errors.refresh_token_error import RefreshTokenError
from .b2b.tax_invoice.errors.attach_b2b_tax_invoice_file_error import AttachB2bTaxInvoiceFileError
from .b2b.tax_invoice.errors.cancel_b2b_tax_invoice_issuance_error import CancelB2bTaxInvoiceIssuanceError
from .b2b.tax_invoice.errors.cancel_b2b_tax_invoice_request_error import CancelB2bTaxInvoiceRequestError
from .b2b.tax_invoice.errors.create_b2b_file_upload_url_error import CreateB2bFileUploadUrlError
from .b2b.tax_invoice.errors.delete_b2b_tax_invoice_attachment_error import DeleteB2bTaxInvoiceAttachmentError
from .b2b.tax_invoice.errors.delete_b2b_tax_invoice_error import DeleteB2bTaxInvoiceError
from .b2b.tax_invoice.errors.download_b2b_tax_invoices_sheet_error import DownloadB2bTaxInvoicesSheetError
from .b2b.tax_invoice.errors.draft_b2b_tax_invoice_error import DraftB2bTaxInvoiceError
from .b2b.tax_invoice.errors.get_b2b_bulk_tax_invoice_error import GetB2bBulkTaxInvoiceError
from .b2b.tax_invoice.errors.get_b2b_tax_invoice_attachments_error import GetB2bTaxInvoiceAttachmentsError
from .b2b.tax_invoice.errors.get_b2b_tax_invoice_error import GetB2bTaxInvoiceError
from .b2b.tax_invoice.errors.get_b2b_tax_invoice_pdf_download_url_error import GetB2bTaxInvoicePdfDownloadUrlError
from .b2b.tax_invoice.errors.get_b2b_tax_invoice_popup_url_error import GetB2bTaxInvoicePopupUrlError
from .b2b.tax_invoice.errors.get_b2b_tax_invoice_print_url_error import GetB2bTaxInvoicePrintUrlError
from .b2b.tax_invoice.errors.get_b2b_tax_invoices_error import GetB2bTaxInvoicesError
from .b2b.tax_invoice.errors.issue_b2b_tax_invoice_error import IssueB2bTaxInvoiceError
from .b2b.tax_invoice.errors.issue_b2b_tax_invoice_immediately_error import IssueB2bTaxInvoiceImmediatelyError
from .b2b.tax_invoice.errors.refuse_b2b_tax_invoice_request_error import RefuseB2bTaxInvoiceRequestError
from .b2b.tax_invoice.errors.request_b2b_tax_invoice_reverse_issuance_error import RequestB2bTaxInvoiceReverseIssuanceError
from .b2b.tax_invoice.errors.send_to_nts_b2b_tax_invoice_error import SendToNtsB2bTaxInvoiceError
from .b2b.tax_invoice.errors.update_b2b_tax_invoice_draft_error import UpdateB2bTaxInvoiceDraftError
from .b2b.tax_invoice.errors.request_b2b_tax_invoice_error import requestB2bTaxInvoiceError
from .identity_verification.errors.confirm_identity_verification_error import ConfirmIdentityVerificationError
from .identity_verification.errors.get_identity_verification_error import GetIdentityVerificationError
from .identity_verification.errors.get_identity_verifications_error import GetIdentityVerificationsError
from .identity_verification.errors.resend_identity_verification_error import ResendIdentityVerificationError
from .identity_verification.errors.send_identity_verification_error import SendIdentityVerificationError
from .payment.billing_key.errors.confirm_billing_key_error import ConfirmBillingKeyError
from .payment.billing_key.errors.confirm_billing_key_issue_and_pay_error import ConfirmBillingKeyIssueAndPayError
from .payment.billing_key.errors.delete_billing_key_error import DeleteBillingKeyError
from .payment.billing_key.errors.get_billing_key_info_error import GetBillingKeyInfoError
from .payment.billing_key.errors.get_billing_key_infos_error import GetBillingKeyInfosError
from .payment.billing_key.errors.issue_billing_key_error import IssueBillingKeyError
from .payment.cash_receipt.errors.cancel_cash_receipt_error import CancelCashReceiptError
from .payment.cash_receipt.errors.get_cash_receipt_error import GetCashReceiptError
from .payment.cash_receipt.errors.get_cash_receipts_error import GetCashReceiptsError
from .payment.cash_receipt.errors.issue_cash_receipt_error import IssueCashReceiptError
from .payment.errors.apply_escrow_logistics_error import ApplyEscrowLogisticsError
from .payment.errors.cancel_payment_error import CancelPaymentError
from .payment.errors.close_virtual_account_error import CloseVirtualAccountError
from .payment.errors.confirm_escrow_error import ConfirmEscrowError
from .payment.errors.confirm_payment_error import ConfirmPaymentError
from .payment.errors.get_all_payment_events_error import GetAllPaymentEventsError
from .payment.errors.get_all_payments_error import GetAllPaymentsError
from .payment.errors.get_payment_error import GetPaymentError
from .payment.errors.get_payment_transactions_error import GetPaymentTransactionsError
from .payment.errors.get_payments_error import GetPaymentsError
from .payment.errors.modify_escrow_logistics_error import ModifyEscrowLogisticsError
from .payment.errors.pay_instantly_error import PayInstantlyError
from .payment.errors.pay_with_billing_key_error import PayWithBillingKeyError
from .payment.errors.pre_register_payment_error import PreRegisterPaymentError
from .payment.errors.register_store_receipt_error import RegisterStoreReceiptError
from .payment.errors.resend_webhook_error import ResendWebhookError
from .payment.payment_schedule.errors.create_payment_schedule_error import CreatePaymentScheduleError
from .payment.payment_schedule.errors.get_payment_schedule_error import GetPaymentScheduleError
from .payment.payment_schedule.errors.get_payment_schedules_error import GetPaymentSchedulesError
from .payment.payment_schedule.errors.revoke_payment_schedules_error import RevokePaymentSchedulesError
from .payment.promotion.errors.get_promotion_error import GetPromotionError
from .pg_specific.errors.get_kakaopay_payment_order_error import GetKakaopayPaymentOrderError
from .platform.account.errors.get_platform_account_holder_error import GetPlatformAccountHolderError
from .platform.account_transfer.errors.get_platform_account_transfers_error import GetPlatformAccountTransfersError
from .platform.bulk_account_transfer.errors.get_platform_bulk_account_transfers_error import GetPlatformBulkAccountTransfersError
from .platform.bulk_payout.errors.get_platform_bulk_payouts_error import GetPlatformBulkPayoutsError
from .platform.company.errors.get_b2b_business_infos_error import GetB2bBusinessInfosError
from .platform.company.errors.get_platform_company_state_error import GetPlatformCompanyStateError
from .platform.errors.cancel_platform_additional_fee_policy_schedule_error import CancelPlatformAdditionalFeePolicyScheduleError
from .platform.errors.cancel_platform_contract_schedule_error import CancelPlatformContractScheduleError
from .platform.errors.cancel_platform_discount_share_policy_schedule_error import CancelPlatformDiscountSharePolicyScheduleError
from .platform.errors.cancel_platform_partner_schedule_error import CancelPlatformPartnerScheduleError
from .platform.errors.get_platform_additional_fee_policy_schedule_error import GetPlatformAdditionalFeePolicyScheduleError
from .platform.errors.get_platform_contract_schedule_error import GetPlatformContractScheduleError
from .platform.errors.get_platform_discount_share_policy_filter_options_error import GetPlatformDiscountSharePolicyFilterOptionsError
from .platform.errors.get_platform_discount_share_policy_schedule_error import GetPlatformDiscountSharePolicyScheduleError
from .platform.errors.get_platform_error import GetPlatformError
from .platform.errors.get_platform_partner_filter_options_error import GetPlatformPartnerFilterOptionsError
from .platform.errors.get_platform_partner_schedule_error import GetPlatformPartnerScheduleError
from .platform.errors.get_platform_setting_error import GetPlatformSettingError
from .platform.errors.reschedule_additional_fee_policy_error import RescheduleAdditionalFeePolicyError
from .platform.errors.reschedule_contract_error import RescheduleContractError
from .platform.errors.reschedule_discount_share_policy_error import RescheduleDiscountSharePolicyError
from .platform.errors.reschedule_partner_error import ReschedulePartnerError
from .platform.errors.schedule_additional_fee_policy_error import ScheduleAdditionalFeePolicyError
from .platform.errors.schedule_contract_error import ScheduleContractError
from .platform.errors.schedule_discount_share_policy_error import ScheduleDiscountSharePolicyError
from .platform.errors.schedule_partner_error import SchedulePartnerError
from .platform.errors.schedule_platform_partners_error import SchedulePlatformPartnersError
from .platform.errors.update_platform_setting_error import UpdatePlatformSettingError
from .platform.partner.errors.archive_platform_partner_error import ArchivePlatformPartnerError
from .platform.partner.errors.connect_bulk_partner_member_company_error import ConnectBulkPartnerMemberCompanyError
from .platform.partner.errors.connect_partner_member_company_error import ConnectPartnerMemberCompanyError
from .platform.partner.errors.create_platform_partner_error import CreatePlatformPartnerError
from .platform.partner.errors.create_platform_partners_error import CreatePlatformPartnersError
from .platform.partner.errors.disconnect_bulk_partner_member_company_error import DisconnectBulkPartnerMemberCompanyError
from .platform.partner.errors.disconnect_partner_member_company_error import DisconnectPartnerMemberCompanyError
from .platform.partner.errors.get_platform_partner_error import GetPlatformPartnerError
from .platform.partner.errors.get_platform_partners_error import GetPlatformPartnersError
from .platform.partner.errors.recover_platform_partner_error import RecoverPlatformPartnerError
from .platform.partner.errors.update_platform_partner_error import UpdatePlatformPartnerError
from .platform.partner_settlement.errors.get_platform_partner_settlements_error import GetPlatformPartnerSettlementsError
from .platform.payout.errors.get_platform_payouts_error import GetPlatformPayoutsError
from .platform.policy.errors.archive_platform_additional_fee_policy_error import ArchivePlatformAdditionalFeePolicyError
from .platform.policy.errors.archive_platform_contract_error import ArchivePlatformContractError
from .platform.policy.errors.archive_platform_discount_share_policy_error import ArchivePlatformDiscountSharePolicyError
from .platform.policy.errors.create_platform_additional_fee_policy_error import CreatePlatformAdditionalFeePolicyError
from .platform.policy.errors.create_platform_contract_error import CreatePlatformContractError
from .platform.policy.errors.create_platform_discount_share_policy_error import CreatePlatformDiscountSharePolicyError
from .platform.policy.errors.get_platform_additional_fee_policies_error import GetPlatformAdditionalFeePoliciesError
from .platform.policy.errors.get_platform_additional_fee_policy_error import GetPlatformAdditionalFeePolicyError
from .platform.policy.errors.get_platform_contract_error import GetPlatformContractError
from .platform.policy.errors.get_platform_contracts_error import GetPlatformContractsError
from .platform.policy.errors.get_platform_discount_share_policies_error import GetPlatformDiscountSharePoliciesError
from .platform.policy.errors.get_platform_discount_share_policy_error import GetPlatformDiscountSharePolicyError
from .platform.policy.errors.recover_platform_additional_fee_policy_error import RecoverPlatformAdditionalFeePolicyError
from .platform.policy.errors.recover_platform_contract_error import RecoverPlatformContractError
from .platform.policy.errors.recover_platform_discount_share_policy_error import RecoverPlatformDiscountSharePolicyError
from .platform.policy.errors.update_platform_additional_fee_policy_error import UpdatePlatformAdditionalFeePolicyError
from .platform.policy.errors.update_platform_contract_error import UpdatePlatformContractError
from .platform.policy.errors.update_platform_discount_share_policy_error import UpdatePlatformDiscountSharePolicyError
from .platform.transfer.errors.create_platform_manual_transfer_error import CreatePlatformManualTransferError
from .platform.transfer.errors.create_platform_order_cancel_transfer_error import CreatePlatformOrderCancelTransferError
from .platform.transfer.errors.create_platform_order_transfer_error import CreatePlatformOrderTransferError
from .platform.transfer.errors.delete_platform_transfer_error import DeletePlatformTransferError
from .platform.transfer.errors.download_platform_transfer_sheet_error import DownloadPlatformTransferSheetError
from .platform.transfer.errors.get_platform_transfer_error import GetPlatformTransferError
from .platform.transfer.errors.get_platform_transfer_summaries_error import GetPlatformTransferSummariesError
from .payment.billing_key.channel_specific_failure import ChannelSpecificFailure
from .common.currency import Currency
from .platform.transfer.platform_cancellable_amount_type import PlatformCancellableAmountType
from .platform.transfer.platform_port_one_payment_cancel_amount_type import PlatformPortOnePaymentCancelAmountType
from .common.selected_channel import SelectedChannel

@dataclass
class B2bBulkTaxInvoiceNotFoundError(DeleteB2bTaxInvoiceError, GetB2bBulkTaxInvoiceError):
    """일괄 세금계산서가 존재하지 않은 경우
    """
    _error: InitVar[InternalB2bBulkTaxInvoiceNotFoundError]

    def __post_init__(self, _error: InternalB2bBulkTaxInvoiceNotFoundError) -> None:
        self.message = _error.message

@dataclass
class B2bExternalServiceError(AttachB2bTaxInvoiceFileError, CancelB2bTaxInvoiceIssuanceError, CancelB2bTaxInvoiceRequestError, CreateB2bFileUploadUrlError, DeleteB2bTaxInvoiceAttachmentError, DeleteB2bTaxInvoiceError, DraftB2bTaxInvoiceError, GetB2bBulkTaxInvoiceError, GetB2bBusinessInfosError, GetB2bTaxInvoiceAttachmentsError, GetB2bTaxInvoiceError, GetB2bTaxInvoicePdfDownloadUrlError, GetB2bTaxInvoicePopupUrlError, GetB2bTaxInvoicePrintUrlError, GetB2bTaxInvoicesError, IssueB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RefuseB2bTaxInvoiceRequestError, RequestB2bTaxInvoiceReverseIssuanceError, SendToNtsB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """외부 서비스에서 에러가 발생한 경우
    """
    _error: InitVar[InternalB2bExternalServiceError]

    def __post_init__(self, _error: InternalB2bExternalServiceError) -> None:
        self.message = _error.message

@dataclass
class B2bNotEnabledError(AttachB2bTaxInvoiceFileError, CancelB2bTaxInvoiceIssuanceError, CancelB2bTaxInvoiceRequestError, CreateB2bFileUploadUrlError, DeleteB2bTaxInvoiceAttachmentError, DeleteB2bTaxInvoiceError, DraftB2bTaxInvoiceError, GetB2bBulkTaxInvoiceError, GetB2bBusinessInfosError, GetB2bTaxInvoiceAttachmentsError, GetB2bTaxInvoiceError, GetB2bTaxInvoicePdfDownloadUrlError, GetB2bTaxInvoicePopupUrlError, GetB2bTaxInvoicePrintUrlError, GetB2bTaxInvoicesError, IssueB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RefuseB2bTaxInvoiceRequestError, RequestB2bTaxInvoiceReverseIssuanceError, SendToNtsB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """B2B 기능이 활성화되지 않은 경우
    """
    _error: InitVar[InternalB2bNotEnabledError]

    def __post_init__(self, _error: InternalB2bNotEnabledError) -> None:
        self.message = _error.message

@dataclass
class ForbiddenError(ApplyEscrowLogisticsError, ArchivePlatformAdditionalFeePolicyError, ArchivePlatformContractError, ArchivePlatformDiscountSharePolicyError, ArchivePlatformPartnerError, AttachB2bTaxInvoiceFileError, CancelB2bTaxInvoiceIssuanceError, CancelB2bTaxInvoiceRequestError, CancelCashReceiptError, CancelPaymentError, CancelPlatformAdditionalFeePolicyScheduleError, CancelPlatformContractScheduleError, CancelPlatformDiscountSharePolicyScheduleError, CancelPlatformPartnerScheduleError, CloseVirtualAccountError, ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError, ConfirmEscrowError, ConfirmIdentityVerificationError, ConfirmPaymentError, ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, CreateB2bFileUploadUrlError, CreatePaymentScheduleError, CreatePlatformAdditionalFeePolicyError, CreatePlatformContractError, CreatePlatformDiscountSharePolicyError, CreatePlatformManualTransferError, CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError, CreatePlatformPartnerError, CreatePlatformPartnersError, DeleteB2bTaxInvoiceAttachmentError, DeleteB2bTaxInvoiceError, DeleteBillingKeyError, DeletePlatformTransferError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError, DraftB2bTaxInvoiceError, GetAllPaymentEventsError, GetAllPaymentsError, GetB2bBulkTaxInvoiceError, GetB2bBusinessInfosError, GetB2bTaxInvoiceAttachmentsError, GetB2bTaxInvoiceError, GetB2bTaxInvoicePdfDownloadUrlError, GetB2bTaxInvoicePopupUrlError, GetB2bTaxInvoicePrintUrlError, GetB2bTaxInvoicesError, GetBillingKeyInfoError, GetBillingKeyInfosError, GetCashReceiptError, GetCashReceiptsError, GetIdentityVerificationError, GetIdentityVerificationsError, GetPaymentError, GetPaymentScheduleError, GetPaymentSchedulesError, GetPaymentTransactionsError, GetPaymentsError, GetPlatformAccountHolderError, GetPlatformAccountTransfersError, GetPlatformAdditionalFeePoliciesError, GetPlatformAdditionalFeePolicyError, GetPlatformAdditionalFeePolicyScheduleError, GetPlatformBulkAccountTransfersError, GetPlatformBulkPayoutsError, GetPlatformCompanyStateError, GetPlatformContractError, GetPlatformContractScheduleError, GetPlatformContractsError, GetPlatformDiscountSharePoliciesError, GetPlatformDiscountSharePolicyError, GetPlatformDiscountSharePolicyFilterOptionsError, GetPlatformDiscountSharePolicyScheduleError, GetPlatformPartnerError, GetPlatformPartnerFilterOptionsError, GetPlatformPartnerScheduleError, GetPlatformPartnerSettlementsError, GetPlatformPartnersError, GetPlatformPayoutsError, GetPlatformSettingError, GetPlatformTransferError, GetPlatformTransferSummariesError, GetPromotionError, IssueB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, IssueBillingKeyError, IssueCashReceiptError, ModifyEscrowLogisticsError, PayInstantlyError, PayWithBillingKeyError, PreRegisterPaymentError, RecoverPlatformAdditionalFeePolicyError, RecoverPlatformContractError, RecoverPlatformDiscountSharePolicyError, RecoverPlatformPartnerError, RefuseB2bTaxInvoiceRequestError, RegisterStoreReceiptError, RequestB2bTaxInvoiceReverseIssuanceError, RescheduleAdditionalFeePolicyError, RescheduleContractError, RescheduleDiscountSharePolicyError, ReschedulePartnerError, ResendIdentityVerificationError, ResendWebhookError, RevokePaymentSchedulesError, ScheduleAdditionalFeePolicyError, ScheduleContractError, ScheduleDiscountSharePolicyError, SchedulePartnerError, SchedulePlatformPartnersError, SendIdentityVerificationError, SendToNtsB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, UpdatePlatformAdditionalFeePolicyError, UpdatePlatformContractError, UpdatePlatformDiscountSharePolicyError, UpdatePlatformPartnerError, UpdatePlatformSettingError, requestB2bTaxInvoiceError):
    """요청이 거절된 경우
    """
    _error: InitVar[InternalForbiddenError]

    def __post_init__(self, _error: InternalForbiddenError) -> None:
        self.message = _error.message

@dataclass
class InvalidRequestError(ApplyEscrowLogisticsError, ArchivePlatformAdditionalFeePolicyError, ArchivePlatformContractError, ArchivePlatformDiscountSharePolicyError, ArchivePlatformPartnerError, AttachB2bTaxInvoiceFileError, CancelB2bTaxInvoiceIssuanceError, CancelB2bTaxInvoiceRequestError, CancelCashReceiptError, CancelPaymentError, CancelPlatformAdditionalFeePolicyScheduleError, CancelPlatformContractScheduleError, CancelPlatformDiscountSharePolicyScheduleError, CancelPlatformPartnerScheduleError, CloseVirtualAccountError, ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError, ConfirmEscrowError, ConfirmIdentityVerificationError, ConfirmPaymentError, ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, CreateB2bFileUploadUrlError, CreatePaymentScheduleError, CreatePlatformAdditionalFeePolicyError, CreatePlatformContractError, CreatePlatformDiscountSharePolicyError, CreatePlatformManualTransferError, CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError, CreatePlatformPartnerError, CreatePlatformPartnersError, DeleteB2bTaxInvoiceAttachmentError, DeleteB2bTaxInvoiceError, DeleteBillingKeyError, DeletePlatformTransferError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError, DownloadB2bTaxInvoicesSheetError, DownloadPlatformTransferSheetError, DraftB2bTaxInvoiceError, GetAllPaymentEventsError, GetAllPaymentsError, GetB2bBulkTaxInvoiceError, GetB2bBusinessInfosError, GetB2bTaxInvoiceAttachmentsError, GetB2bTaxInvoiceError, GetB2bTaxInvoicePdfDownloadUrlError, GetB2bTaxInvoicePopupUrlError, GetB2bTaxInvoicePrintUrlError, GetB2bTaxInvoicesError, GetBillingKeyInfoError, GetBillingKeyInfosError, GetCashReceiptError, GetCashReceiptsError, GetIdentityVerificationError, GetIdentityVerificationsError, GetKakaopayPaymentOrderError, GetPaymentError, GetPaymentScheduleError, GetPaymentSchedulesError, GetPaymentTransactionsError, GetPaymentsError, GetPlatformAccountHolderError, GetPlatformAccountTransfersError, GetPlatformAdditionalFeePoliciesError, GetPlatformAdditionalFeePolicyError, GetPlatformAdditionalFeePolicyScheduleError, GetPlatformBulkAccountTransfersError, GetPlatformBulkPayoutsError, GetPlatformCompanyStateError, GetPlatformContractError, GetPlatformContractScheduleError, GetPlatformContractsError, GetPlatformDiscountSharePoliciesError, GetPlatformDiscountSharePolicyError, GetPlatformDiscountSharePolicyFilterOptionsError, GetPlatformDiscountSharePolicyScheduleError, GetPlatformError, GetPlatformPartnerError, GetPlatformPartnerFilterOptionsError, GetPlatformPartnerScheduleError, GetPlatformPartnerSettlementsError, GetPlatformPartnersError, GetPlatformPayoutsError, GetPlatformSettingError, GetPlatformTransferError, GetPlatformTransferSummariesError, GetPromotionError, IssueB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, IssueBillingKeyError, IssueCashReceiptError, LoginViaApiSecretError, ModifyEscrowLogisticsError, PayInstantlyError, PayWithBillingKeyError, PreRegisterPaymentError, RecoverPlatformAdditionalFeePolicyError, RecoverPlatformContractError, RecoverPlatformDiscountSharePolicyError, RecoverPlatformPartnerError, RefreshTokenError, RefuseB2bTaxInvoiceRequestError, RegisterStoreReceiptError, RequestB2bTaxInvoiceReverseIssuanceError, RescheduleAdditionalFeePolicyError, RescheduleContractError, RescheduleDiscountSharePolicyError, ReschedulePartnerError, ResendIdentityVerificationError, ResendWebhookError, RevokePaymentSchedulesError, ScheduleAdditionalFeePolicyError, ScheduleContractError, ScheduleDiscountSharePolicyError, SchedulePartnerError, SchedulePlatformPartnersError, SendIdentityVerificationError, SendToNtsB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, UpdatePlatformAdditionalFeePolicyError, UpdatePlatformContractError, UpdatePlatformDiscountSharePolicyError, UpdatePlatformPartnerError, UpdatePlatformSettingError, requestB2bTaxInvoiceError):
    """요청된 입력 정보가 유효하지 않은 경우

    허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.
    """
    _error: InitVar[InternalInvalidRequestError]

    def __post_init__(self, _error: InternalInvalidRequestError) -> None:
        self.message = _error.message

@dataclass
class UnauthorizedError(ApplyEscrowLogisticsError, ArchivePlatformAdditionalFeePolicyError, ArchivePlatformContractError, ArchivePlatformDiscountSharePolicyError, ArchivePlatformPartnerError, AttachB2bTaxInvoiceFileError, CancelB2bTaxInvoiceIssuanceError, CancelB2bTaxInvoiceRequestError, CancelCashReceiptError, CancelPaymentError, CancelPlatformAdditionalFeePolicyScheduleError, CancelPlatformContractScheduleError, CancelPlatformDiscountSharePolicyScheduleError, CancelPlatformPartnerScheduleError, CloseVirtualAccountError, ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError, ConfirmEscrowError, ConfirmIdentityVerificationError, ConfirmPaymentError, ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, CreateB2bFileUploadUrlError, CreatePaymentScheduleError, CreatePlatformAdditionalFeePolicyError, CreatePlatformContractError, CreatePlatformDiscountSharePolicyError, CreatePlatformManualTransferError, CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError, CreatePlatformPartnerError, CreatePlatformPartnersError, DeleteB2bTaxInvoiceAttachmentError, DeleteB2bTaxInvoiceError, DeleteBillingKeyError, DeletePlatformTransferError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError, DownloadB2bTaxInvoicesSheetError, DownloadPlatformTransferSheetError, DraftB2bTaxInvoiceError, GetAllPaymentEventsError, GetAllPaymentsError, GetB2bBulkTaxInvoiceError, GetB2bBusinessInfosError, GetB2bTaxInvoiceAttachmentsError, GetB2bTaxInvoiceError, GetB2bTaxInvoicePdfDownloadUrlError, GetB2bTaxInvoicePopupUrlError, GetB2bTaxInvoicePrintUrlError, GetB2bTaxInvoicesError, GetBillingKeyInfoError, GetBillingKeyInfosError, GetCashReceiptError, GetCashReceiptsError, GetIdentityVerificationError, GetIdentityVerificationsError, GetKakaopayPaymentOrderError, GetPaymentError, GetPaymentScheduleError, GetPaymentSchedulesError, GetPaymentTransactionsError, GetPaymentsError, GetPlatformAccountHolderError, GetPlatformAccountTransfersError, GetPlatformAdditionalFeePoliciesError, GetPlatformAdditionalFeePolicyError, GetPlatformAdditionalFeePolicyScheduleError, GetPlatformBulkAccountTransfersError, GetPlatformBulkPayoutsError, GetPlatformCompanyStateError, GetPlatformContractError, GetPlatformContractScheduleError, GetPlatformContractsError, GetPlatformDiscountSharePoliciesError, GetPlatformDiscountSharePolicyError, GetPlatformDiscountSharePolicyFilterOptionsError, GetPlatformDiscountSharePolicyScheduleError, GetPlatformError, GetPlatformPartnerError, GetPlatformPartnerFilterOptionsError, GetPlatformPartnerScheduleError, GetPlatformPartnerSettlementsError, GetPlatformPartnersError, GetPlatformPayoutsError, GetPlatformSettingError, GetPlatformTransferError, GetPlatformTransferSummariesError, GetPromotionError, IssueB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, IssueBillingKeyError, IssueCashReceiptError, LoginViaApiSecretError, ModifyEscrowLogisticsError, PayInstantlyError, PayWithBillingKeyError, PreRegisterPaymentError, RecoverPlatformAdditionalFeePolicyError, RecoverPlatformContractError, RecoverPlatformDiscountSharePolicyError, RecoverPlatformPartnerError, RefreshTokenError, RefuseB2bTaxInvoiceRequestError, RegisterStoreReceiptError, RequestB2bTaxInvoiceReverseIssuanceError, RescheduleAdditionalFeePolicyError, RescheduleContractError, RescheduleDiscountSharePolicyError, ReschedulePartnerError, ResendIdentityVerificationError, ResendWebhookError, RevokePaymentSchedulesError, ScheduleAdditionalFeePolicyError, ScheduleContractError, ScheduleDiscountSharePolicyError, SchedulePartnerError, SchedulePlatformPartnersError, SendIdentityVerificationError, SendToNtsB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, UpdatePlatformAdditionalFeePolicyError, UpdatePlatformContractError, UpdatePlatformDiscountSharePolicyError, UpdatePlatformPartnerError, UpdatePlatformSettingError, requestB2bTaxInvoiceError):
    """인증 정보가 올바르지 않은 경우
    """
    _error: InitVar[InternalUnauthorizedError]

    def __post_init__(self, _error: InternalUnauthorizedError) -> None:
        self.message = _error.message

@dataclass
class B2BCannotChangeTaxTypeError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """세금계산서 과세 유형을 수정할 수 없는 경우
    """
    _error: InitVar[InternalB2BCannotChangeTaxTypeError]

    def __post_init__(self, _error: InternalB2BCannotChangeTaxTypeError) -> None:
        self.message = _error.message

@dataclass
class B2bDocumentKeyCannotBeChangedError(UpdateB2bTaxInvoiceDraftError):
    """문서번호 수정이 요청된 경우
    """
    _error: InitVar[InternalB2bDocumentKeyCannotBeChangedError]

    def __post_init__(self, _error: InternalB2bDocumentKeyCannotBeChangedError) -> None:
        self.message = _error.message

@dataclass
class B2bIdAlreadyExistsError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError):
    """ID가 이미 사용중인 경우
    """
    _error: InitVar[InternalB2bIdAlreadyExistsError]

    def __post_init__(self, _error: InternalB2bIdAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class B2bIssuanceTypeMismatchError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """세금계산서 발행 유형이 올바르지 않은 경우
    """
    _error: InitVar[InternalB2bIssuanceTypeMismatchError]

    def __post_init__(self, _error: InternalB2bIssuanceTypeMismatchError) -> None:
        self.message = _error.message

@dataclass
class B2bModificationNotProvidedError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """세금계산서 수정 입력 정보를 찾을 수 없는 경우
    """
    _error: InitVar[InternalB2bModificationNotProvidedError]

    def __post_init__(self, _error: InternalB2bModificationNotProvidedError) -> None:
        self.message = _error.message

@dataclass
class B2bOriginalTaxInvoiceNotFoundError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """원본 세금계산서가 존재하지 않은 경우
    """
    _error: InitVar[InternalB2bOriginalTaxInvoiceNotFoundError]

    def __post_init__(self, _error: InternalB2bOriginalTaxInvoiceNotFoundError) -> None:
        self.message = _error.message

@dataclass
class B2bRecipientNotFoundError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError):
    """공급받는자가 존재하지 않은 경우
    """
    _error: InitVar[InternalB2bRecipientNotFoundError]

    def __post_init__(self, _error: InternalB2bRecipientNotFoundError) -> None:
        self.message = _error.message

@dataclass
class B2bSupplierNotFoundError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError):
    """공급자가 존재하지 않은 경우
    """
    _error: InitVar[InternalB2bSupplierNotFoundError]

    def __post_init__(self, _error: InternalB2bSupplierNotFoundError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceNotDraftedStatusError(AttachB2bTaxInvoiceFileError, DeleteB2bTaxInvoiceAttachmentError, IssueB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """세금계산서가 임시저장 완료 상태가 아닌 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceNotDraftedStatusError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceNotDraftedStatusError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceNotFoundError(AttachB2bTaxInvoiceFileError, CancelB2bTaxInvoiceIssuanceError, CancelB2bTaxInvoiceRequestError, DeleteB2bTaxInvoiceAttachmentError, DeleteB2bTaxInvoiceError, DraftB2bTaxInvoiceError, GetB2bTaxInvoiceAttachmentsError, GetB2bTaxInvoiceError, GetB2bTaxInvoicePdfDownloadUrlError, GetB2bTaxInvoicePopupUrlError, GetB2bTaxInvoicePrintUrlError, GetB2bTaxInvoicesError, IssueB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RefuseB2bTaxInvoiceRequestError, RequestB2bTaxInvoiceReverseIssuanceError, SendToNtsB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """세금계산서가 존재하지 않은 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceNotFoundError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceNotFoundError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError):
    """세금계산서에 공급 받는자 문서 번호가 이미 사용 중인 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError) -> None:
        self.message = _error.message

@dataclass
class B2BTaxInvoiceStatusNotSendingCompletedError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError):
    """원본 세금계산서가 전송완료 상태가 아닌 경우
    """
    _error: InitVar[InternalB2BTaxInvoiceStatusNotSendingCompletedError]

    def __post_init__(self, _error: InternalB2BTaxInvoiceStatusNotSendingCompletedError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError(DraftB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RequestB2bTaxInvoiceReverseIssuanceError, UpdateB2bTaxInvoiceDraftError):
    """세금계산서에 공급자 문서 번호가 이미 사용 중인 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError) -> None:
        self.message = _error.message

@dataclass
class B2bFileNotFoundError(AttachB2bTaxInvoiceFileError):
    """업로드한 파일을 찾을 수 없는 경우
    """
    _error: InitVar[InternalB2bFileNotFoundError]

    def __post_init__(self, _error: InternalB2bFileNotFoundError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceAttachmentNotFoundError(DeleteB2bTaxInvoiceAttachmentError):
    """세금계산서의 첨부파일을 찾을 수 없는 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceAttachmentNotFoundError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceAttachmentNotFoundError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceNotIssuedStatusError(CancelB2bTaxInvoiceIssuanceError, SendToNtsB2bTaxInvoiceError):
    """세금계산서가 발행된(ISSUED) 상태가 아닌 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceNotIssuedStatusError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceNotIssuedStatusError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceNotRequestedStatusError(CancelB2bTaxInvoiceRequestError, IssueB2bTaxInvoiceError, RefuseB2bTaxInvoiceRequestError):
    """세금계산서가 역발행 대기 상태가 아닌 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceNotRequestedStatusError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceNotRequestedStatusError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceNoRecipientDocumentKeyError(CancelB2bTaxInvoiceRequestError, requestB2bTaxInvoiceError):
    """세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceNoRecipientDocumentKeyError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceNoRecipientDocumentKeyError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceNoSupplierDocumentKeyError(IssueB2bTaxInvoiceError, RefuseB2bTaxInvoiceRequestError):
    """세금계산서에 공급자 문서 번호가 기입되지 않은 경우
    """
    _error: InitVar[InternalB2bTaxInvoiceNoSupplierDocumentKeyError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceNoSupplierDocumentKeyError) -> None:
        self.message = _error.message

@dataclass
class B2bTaxInvoiceNonDeletableStatusError(DeleteB2bTaxInvoiceError):
    """세금계산서가 삭제 가능한 상태가 아닌 경우

    삭제 가능한 상태는 `DRAFTED`, `ISSUE_REFUSED`, `REQUEST_CANCELLED_BY_RECIPIENT`, `ISSUE_CANCELLED_BY_SUPPLIER`, `SENDING_FAILED` 입니다.
    """
    _error: InitVar[InternalB2bTaxInvoiceNonDeletableStatusError]

    def __post_init__(self, _error: InternalB2bTaxInvoiceNonDeletableStatusError) -> None:
        self.message = _error.message

@dataclass
class PlatformNotEnabledError(ArchivePlatformAdditionalFeePolicyError, ArchivePlatformContractError, ArchivePlatformDiscountSharePolicyError, ArchivePlatformPartnerError, CancelPlatformAdditionalFeePolicyScheduleError, CancelPlatformContractScheduleError, CancelPlatformDiscountSharePolicyScheduleError, CancelPlatformPartnerScheduleError, ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, CreatePlatformAdditionalFeePolicyError, CreatePlatformContractError, CreatePlatformDiscountSharePolicyError, CreatePlatformManualTransferError, CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError, CreatePlatformPartnerError, CreatePlatformPartnersError, DeletePlatformTransferError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError, GetPlatformAccountHolderError, GetPlatformAccountTransfersError, GetPlatformAdditionalFeePoliciesError, GetPlatformAdditionalFeePolicyError, GetPlatformAdditionalFeePolicyScheduleError, GetPlatformBulkAccountTransfersError, GetPlatformBulkPayoutsError, GetPlatformCompanyStateError, GetPlatformContractError, GetPlatformContractScheduleError, GetPlatformContractsError, GetPlatformDiscountSharePoliciesError, GetPlatformDiscountSharePolicyError, GetPlatformDiscountSharePolicyFilterOptionsError, GetPlatformDiscountSharePolicyScheduleError, GetPlatformError, GetPlatformPartnerError, GetPlatformPartnerFilterOptionsError, GetPlatformPartnerScheduleError, GetPlatformPartnerSettlementsError, GetPlatformPartnersError, GetPlatformPayoutsError, GetPlatformSettingError, GetPlatformTransferError, GetPlatformTransferSummariesError, RecoverPlatformAdditionalFeePolicyError, RecoverPlatformContractError, RecoverPlatformDiscountSharePolicyError, RecoverPlatformPartnerError, RescheduleAdditionalFeePolicyError, RescheduleContractError, RescheduleDiscountSharePolicyError, ReschedulePartnerError, ScheduleAdditionalFeePolicyError, ScheduleContractError, ScheduleDiscountSharePolicyError, SchedulePartnerError, SchedulePlatformPartnersError, UpdatePlatformAdditionalFeePolicyError, UpdatePlatformContractError, UpdatePlatformDiscountSharePolicyError, UpdatePlatformPartnerError, UpdatePlatformSettingError):
    """플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
    """
    _error: InitVar[InternalPlatformNotEnabledError]

    def __post_init__(self, _error: InternalPlatformNotEnabledError) -> None:
        self.message = _error.message

@dataclass
class PlatformAdditionalFeePolicyNotFoundError(ArchivePlatformAdditionalFeePolicyError, CancelPlatformAdditionalFeePolicyScheduleError, GetPlatformAdditionalFeePolicyError, GetPlatformAdditionalFeePolicyScheduleError, RecoverPlatformAdditionalFeePolicyError, RescheduleAdditionalFeePolicyError, ScheduleAdditionalFeePolicyError, UpdatePlatformAdditionalFeePolicyError):
    _error: InitVar[InternalPlatformAdditionalFeePolicyNotFoundError]

    def __post_init__(self, _error: InternalPlatformAdditionalFeePolicyNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformAdditionalFeePolicyScheduleAlreadyExistsError(ScheduleAdditionalFeePolicyError):
    _error: InitVar[InternalPlatformAdditionalFeePolicyScheduleAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformAdditionalFeePolicyScheduleAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformArchivedAdditionalFeePolicyError(ScheduleAdditionalFeePolicyError, UpdatePlatformAdditionalFeePolicyError):
    """보관된 추가 수수료 정책을 업데이트하려고 하는 경우
    """
    _error: InitVar[InternalPlatformArchivedAdditionalFeePolicyError]

    def __post_init__(self, _error: InternalPlatformArchivedAdditionalFeePolicyError) -> None:
        self.message = _error.message

@dataclass
class PlatformContractNotFoundError(ArchivePlatformContractError, CancelPlatformContractScheduleError, CreatePlatformOrderTransferError, CreatePlatformPartnerError, GetPlatformContractError, GetPlatformContractScheduleError, RecoverPlatformContractError, RescheduleContractError, ReschedulePartnerError, ScheduleContractError, SchedulePartnerError, SchedulePlatformPartnersError, UpdatePlatformContractError, UpdatePlatformPartnerError):
    _error: InitVar[InternalPlatformContractNotFoundError]

    def __post_init__(self, _error: InternalPlatformContractNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformArchivedContractError(ScheduleContractError, UpdatePlatformContractError):
    """보관된 계약을 업데이트하려고 하는 경우
    """
    _error: InitVar[InternalPlatformArchivedContractError]

    def __post_init__(self, _error: InternalPlatformArchivedContractError) -> None:
        self.message = _error.message

@dataclass
class PlatformContractScheduleAlreadyExistsError(ScheduleContractError):
    _error: InitVar[InternalPlatformContractScheduleAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformContractScheduleAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformDiscountSharePolicyNotFoundError(ArchivePlatformDiscountSharePolicyError, CancelPlatformDiscountSharePolicyScheduleError, GetPlatformDiscountSharePolicyError, GetPlatformDiscountSharePolicyScheduleError, RecoverPlatformDiscountSharePolicyError, RescheduleDiscountSharePolicyError, ScheduleDiscountSharePolicyError, UpdatePlatformDiscountSharePolicyError):
    _error: InitVar[InternalPlatformDiscountSharePolicyNotFoundError]

    def __post_init__(self, _error: InternalPlatformDiscountSharePolicyNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformArchivedDiscountSharePolicyError(ScheduleDiscountSharePolicyError, UpdatePlatformDiscountSharePolicyError):
    """보관된 할인 분담 정책을 업데이트하려고 하는 경우
    """
    _error: InitVar[InternalPlatformArchivedDiscountSharePolicyError]

    def __post_init__(self, _error: InternalPlatformArchivedDiscountSharePolicyError) -> None:
        self.message = _error.message

@dataclass
class PlatformDiscountSharePolicyScheduleAlreadyExistsError(ScheduleDiscountSharePolicyError):
    _error: InitVar[InternalPlatformDiscountSharePolicyScheduleAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformDiscountSharePolicyScheduleAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformArchivedPartnersCannotBeScheduledError(SchedulePlatformPartnersError):
    """보관된 파트너들을 예약 업데이트하려고 하는 경우
    """
    _error: InitVar[InternalPlatformArchivedPartnersCannotBeScheduledError]

    def __post_init__(self, _error: InternalPlatformArchivedPartnersCannotBeScheduledError) -> None:
        self.message = _error.message

@dataclass
class PlatformMemberCompanyConnectedPartnersCannotBeScheduledError(SchedulePlatformPartnersError):
    """연동 사업자로 연동된 파트너들을 예약 수정하려고 시도한 경우
    """
    ids: list[str] = field(init=False)
    graphql_ids: list[str] = field(init=False)
    _error: InitVar[InternalPlatformMemberCompanyConnectedPartnersCannotBeScheduledError]

    def __post_init__(self, _error: InternalPlatformMemberCompanyConnectedPartnersCannotBeScheduledError) -> None:
        self.ids = _error.ids
        self.graphql_ids = _error.graphql_ids
        self.message = _error.message

@dataclass
class PlatformPartnerSchedulesAlreadyExistError(SchedulePlatformPartnersError):
    ids: list[str] = field(init=False)
    graphql_ids: list[str] = field(init=False)
    _error: InitVar[InternalPlatformPartnerSchedulesAlreadyExistError]

    def __post_init__(self, _error: InternalPlatformPartnerSchedulesAlreadyExistError) -> None:
        self.ids = _error.ids
        self.graphql_ids = _error.graphql_ids
        self.message = _error.message

@dataclass
class PlatformUserDefinedPropertyNotFoundError(CreatePlatformManualTransferError, CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError, CreatePlatformPartnerError, CreatePlatformPartnersError, SchedulePartnerError, SchedulePlatformPartnersError, UpdatePlatformPartnerError):
    """사용자 정의 속성이 존재 하지 않는 경우
    """
    _error: InitVar[InternalPlatformUserDefinedPropertyNotFoundError]

    def __post_init__(self, _error: InternalPlatformUserDefinedPropertyNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformPartnerNotFoundError(ArchivePlatformPartnerError, CancelPlatformPartnerScheduleError, ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, CreatePlatformManualTransferError, CreatePlatformOrderTransferError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError, GetPlatformPartnerError, GetPlatformPartnerScheduleError, RecoverPlatformPartnerError, ReschedulePartnerError, SchedulePartnerError, UpdatePlatformPartnerError):
    _error: InitVar[InternalPlatformPartnerNotFoundError]

    def __post_init__(self, _error: InternalPlatformPartnerNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformMemberCompanyConnectedPartnerCannotBeScheduledError(ReschedulePartnerError, SchedulePartnerError):
    """연동 사업자로 연동된 파트너를 예약 수정하려고 시도한 경우
    """
    _error: InitVar[InternalPlatformMemberCompanyConnectedPartnerCannotBeScheduledError]

    def __post_init__(self, _error: InternalPlatformMemberCompanyConnectedPartnerCannotBeScheduledError) -> None:
        self.message = _error.message

@dataclass
class PlatformAccountVerificationAlreadyUsedError(CreatePlatformPartnerError, SchedulePartnerError, UpdatePlatformPartnerError):
    """파트너 계좌 검증 아이디를 이미 사용한 경우
    """
    _error: InitVar[InternalPlatformAccountVerificationAlreadyUsedError]

    def __post_init__(self, _error: InternalPlatformAccountVerificationAlreadyUsedError) -> None:
        self.message = _error.message

@dataclass
class PlatformAccountVerificationFailedError(CreatePlatformPartnerError, SchedulePartnerError, UpdatePlatformPartnerError):
    """파트너 계좌 인증이 실패한 경우
    """
    _error: InitVar[InternalPlatformAccountVerificationFailedError]

    def __post_init__(self, _error: InternalPlatformAccountVerificationFailedError) -> None:
        self.message = _error.message

@dataclass
class PlatformAccountVerificationNotFoundError(CreatePlatformPartnerError, SchedulePartnerError, UpdatePlatformPartnerError):
    """파트너 계좌 검증 아이디를 찾을 수 없는 경우
    """
    _error: InitVar[InternalPlatformAccountVerificationNotFoundError]

    def __post_init__(self, _error: InternalPlatformAccountVerificationNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformArchivedPartnerError(SchedulePartnerError, UpdatePlatformPartnerError):
    """보관된 파트너를 업데이트하려고 하는 경우
    """
    _error: InitVar[InternalPlatformArchivedPartnerError]

    def __post_init__(self, _error: InternalPlatformArchivedPartnerError) -> None:
        self.message = _error.message

@dataclass
class PlatformCompanyVerificationAlreadyUsedError(CreatePlatformPartnerError, SchedulePartnerError, UpdatePlatformPartnerError):
    """파트너 사업자 검증 아이디를 이미 사용한 경우
    """
    _error: InitVar[InternalPlatformCompanyVerificationAlreadyUsedError]

    def __post_init__(self, _error: InternalPlatformCompanyVerificationAlreadyUsedError) -> None:
        self.message = _error.message

@dataclass
class PlatformInsufficientDataToChangePartnerTypeError(SchedulePartnerError, UpdatePlatformPartnerError):
    """파트너 타입 수정에 필요한 데이터가 부족한 경우
    """
    _error: InitVar[InternalPlatformInsufficientDataToChangePartnerTypeError]

    def __post_init__(self, _error: InternalPlatformInsufficientDataToChangePartnerTypeError) -> None:
        self.message = _error.message

@dataclass
class PlatformMemberCompanyConnectedPartnerBrnUnchangeableError(SchedulePartnerError, UpdatePlatformPartnerError):
    """연동 사업자로 연동된 파트너의 사업자등록번호를 변경하려고 시도한 경우
    """
    _error: InitVar[InternalPlatformMemberCompanyConnectedPartnerBrnUnchangeableError]

    def __post_init__(self, _error: InternalPlatformMemberCompanyConnectedPartnerBrnUnchangeableError) -> None:
        self.message = _error.message

@dataclass
class PlatformMemberCompanyConnectedPartnerTypeUnchangeableError(SchedulePartnerError, UpdatePlatformPartnerError):
    """연동 사업자로 연동된 파트너의 파트너 유형을 변경하려고 시도한 경우
    """
    _error: InitVar[InternalPlatformMemberCompanyConnectedPartnerTypeUnchangeableError]

    def __post_init__(self, _error: InternalPlatformMemberCompanyConnectedPartnerTypeUnchangeableError) -> None:
        self.message = _error.message

@dataclass
class PlatformPartnerScheduleAlreadyExistsError(SchedulePartnerError):
    _error: InitVar[InternalPlatformPartnerScheduleAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformPartnerScheduleAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformCompanyNotFoundError(GetPlatformCompanyStateError):
    """사업자 정보를 찾을 수 없는 경우
    """
    _error: InitVar[InternalPlatformCompanyNotFoundError]

    def __post_init__(self, _error: InternalPlatformCompanyNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformExternalApiFailedError(ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError, GetPlatformAccountHolderError, GetPlatformCompanyStateError):
    """외부 api 오류
    """
    _error: InitVar[InternalPlatformExternalApiFailedError]

    def __post_init__(self, _error: InternalPlatformExternalApiFailedError) -> None:
        self.message = _error.message

@dataclass
class PlatformAdditionalFeePolicyAlreadyExistsError(CreatePlatformAdditionalFeePolicyError):
    _error: InitVar[InternalPlatformAdditionalFeePolicyAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformAdditionalFeePolicyAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformCannotArchiveScheduledAdditionalFeePolicyError(ArchivePlatformAdditionalFeePolicyError):
    """예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우
    """
    _error: InitVar[InternalPlatformCannotArchiveScheduledAdditionalFeePolicyError]

    def __post_init__(self, _error: InternalPlatformCannotArchiveScheduledAdditionalFeePolicyError) -> None:
        self.message = _error.message

@dataclass
class PlatformContractAlreadyExistsError(CreatePlatformContractError):
    _error: InitVar[InternalPlatformContractAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformContractAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformCannotArchiveScheduledContractError(ArchivePlatformContractError):
    """예약된 업데이트가 있는 계약을 보관하려고 하는 경우
    """
    _error: InitVar[InternalPlatformCannotArchiveScheduledContractError]

    def __post_init__(self, _error: InternalPlatformCannotArchiveScheduledContractError) -> None:
        self.message = _error.message

@dataclass
class PlatformDiscountSharePolicyAlreadyExistsError(CreatePlatformDiscountSharePolicyError):
    _error: InitVar[InternalPlatformDiscountSharePolicyAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformDiscountSharePolicyAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformCannotArchiveScheduledDiscountSharePolicyError(ArchivePlatformDiscountSharePolicyError):
    """예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우
    """
    _error: InitVar[InternalPlatformCannotArchiveScheduledDiscountSharePolicyError]

    def __post_init__(self, _error: InternalPlatformCannotArchiveScheduledDiscountSharePolicyError) -> None:
        self.message = _error.message

@dataclass
class PlatformExternalApiTemporarilyFailedError(GetPlatformAccountHolderError):
    """외부 api의 일시적인 오류
    """
    _error: InitVar[InternalPlatformExternalApiTemporarilyFailedError]

    def __post_init__(self, _error: InternalPlatformExternalApiTemporarilyFailedError) -> None:
        self.message = _error.message

@dataclass
class PlatformNotSupportedBankError(GetPlatformAccountHolderError):
    """지원하지 않는 은행인 경우
    """
    _error: InitVar[InternalPlatformNotSupportedBankError]

    def __post_init__(self, _error: InternalPlatformNotSupportedBankError) -> None:
        self.message = _error.message

@dataclass
class PlatformCurrencyNotSupportedError(CreatePlatformOrderTransferError, CreatePlatformPartnerError, CreatePlatformPartnersError):
    """지원 되지 않는 통화를 선택한 경우
    """
    _error: InitVar[InternalPlatformCurrencyNotSupportedError]

    def __post_init__(self, _error: InternalPlatformCurrencyNotSupportedError) -> None:
        self.message = _error.message

@dataclass
class PlatformPartnerIdAlreadyExistsError(CreatePlatformPartnerError):
    _error: InitVar[InternalPlatformPartnerIdAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformPartnerIdAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformContractsNotFoundError(CreatePlatformPartnersError):
    ids: list[str] = field(init=False)
    graphql_ids: list[str] = field(init=False)
    _error: InitVar[InternalPlatformContractsNotFoundError]

    def __post_init__(self, _error: InternalPlatformContractsNotFoundError) -> None:
        self.ids = _error.ids
        self.graphql_ids = _error.graphql_ids
        self.message = _error.message

@dataclass
class PlatformPartnerIdsAlreadyExistError(CreatePlatformPartnersError):
    ids: list[str] = field(init=False)
    graphql_ids: list[str] = field(init=False)
    _error: InitVar[InternalPlatformPartnerIdsAlreadyExistError]

    def __post_init__(self, _error: InternalPlatformPartnerIdsAlreadyExistError) -> None:
        self.ids = _error.ids
        self.graphql_ids = _error.graphql_ids
        self.message = _error.message

@dataclass
class PlatformPartnerIdsDuplicatedError(CreatePlatformPartnersError):
    ids: list[str] = field(init=False)
    graphql_ids: list[str] = field(init=False)
    _error: InitVar[InternalPlatformPartnerIdsDuplicatedError]

    def __post_init__(self, _error: InternalPlatformPartnerIdsDuplicatedError) -> None:
        self.ids = _error.ids
        self.graphql_ids = _error.graphql_ids
        self.message = _error.message

@dataclass
class PlatformBtxNotEnabledError(ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError):
    """BTX 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
    """
    _error: InitVar[InternalPlatformBtxNotEnabledError]

    def __post_init__(self, _error: InternalPlatformBtxNotEnabledError) -> None:
        self.message = _error.message

@dataclass
class PlatformTargetPartnerNotFoundError(ConnectBulkPartnerMemberCompanyError, DisconnectBulkPartnerMemberCompanyError):
    """처리 대상 파트너가 존재하지 않는 경우
    """
    _error: InitVar[InternalPlatformTargetPartnerNotFoundError]

    def __post_init__(self, _error: InternalPlatformTargetPartnerNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformMemberCompanyNotConnectableStatusError(ConnectPartnerMemberCompanyError):
    """파트너 연동 사업자 연동 상태가 연동 가능한 상태가 아닌 경우
    """
    _error: InitVar[InternalPlatformMemberCompanyNotConnectableStatusError]

    def __post_init__(self, _error: InternalPlatformMemberCompanyNotConnectableStatusError) -> None:
        self.message = _error.message

@dataclass
class PlatformPartnerScheduleExistsError(ConnectPartnerMemberCompanyError):
    """파트너 수정 예약 건이 존재하는 경우
    """
    _error: InitVar[InternalPlatformPartnerScheduleExistsError]

    def __post_init__(self, _error: InternalPlatformPartnerScheduleExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformPartnerTaxationTypeIsSimpleError(ConnectPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError):
    """파트너의 과세 유형이 간이 과세 세금계산서 미발행 유형인 경우
    """
    _error: InitVar[InternalPlatformPartnerTaxationTypeIsSimpleError]

    def __post_init__(self, _error: InternalPlatformPartnerTaxationTypeIsSimpleError) -> None:
        self.message = _error.message

@dataclass
class PlatformPartnerTypeIsNotBusinessError(ConnectPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError):
    """파트너 유형이 사업자가 아닌 경우
    """
    _error: InitVar[InternalPlatformPartnerTypeIsNotBusinessError]

    def __post_init__(self, _error: InternalPlatformPartnerTypeIsNotBusinessError) -> None:
        self.message = _error.message

@dataclass
class PlatformMemberCompanyNotConnectedError(DisconnectPartnerMemberCompanyError):
    """파트너가 연동 사업자로 연동 되어있지 않은 경우
    """
    _error: InitVar[InternalPlatformMemberCompanyNotConnectedError]

    def __post_init__(self, _error: InternalPlatformMemberCompanyNotConnectedError) -> None:
        self.message = _error.message

@dataclass
class PlatformOngoingTaxInvoiceExistsError(DisconnectPartnerMemberCompanyError):
    """진행 중인 세금계산서가 존재하는 경우
    """
    _error: InitVar[InternalPlatformOngoingTaxInvoiceExistsError]

    def __post_init__(self, _error: InternalPlatformOngoingTaxInvoiceExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformCannotArchiveScheduledPartnerError(ArchivePlatformPartnerError):
    """예약된 업데이트가 있는 파트너를 보관하려고 하는 경우
    """
    _error: InitVar[InternalPlatformCannotArchiveScheduledPartnerError]

    def __post_init__(self, _error: InternalPlatformCannotArchiveScheduledPartnerError) -> None:
        self.message = _error.message

@dataclass
class PlatformAdditionalFeePoliciesNotFoundError(CreatePlatformOrderTransferError):
    ids: list[str] = field(init=False)
    graphql_ids: list[str] = field(init=False)
    _error: InitVar[InternalPlatformAdditionalFeePoliciesNotFoundError]

    def __post_init__(self, _error: InternalPlatformAdditionalFeePoliciesNotFoundError) -> None:
        self.ids = _error.ids
        self.graphql_ids = _error.graphql_ids
        self.message = _error.message

@dataclass
class PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError(CreatePlatformOrderTransferError):
    id: str = field(init=False)
    graphql_id: str = field(init=False)
    fee_currency: Currency = field(init=False)
    settlement_currency: Currency = field(init=False)
    _error: InitVar[InternalPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError]

    def __post_init__(self, _error: InternalPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError) -> None:
        self.id = _error.id
        self.graphql_id = _error.graphql_id
        self.fee_currency = _error.fee_currency
        self.settlement_currency = _error.settlement_currency
        self.message = _error.message

@dataclass
class PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError(CreatePlatformOrderTransferError):
    id: str = field(init=False)
    graphql_id: str = field(init=False)
    fee_currency: Currency = field(init=False)
    settlement_currency: Currency = field(init=False)
    _error: InitVar[InternalPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError]

    def __post_init__(self, _error: InternalPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError) -> None:
        self.id = _error.id
        self.graphql_id = _error.graphql_id
        self.fee_currency = _error.fee_currency
        self.settlement_currency = _error.settlement_currency
        self.message = _error.message

@dataclass
class PlatformDiscountSharePoliciesNotFoundError(CreatePlatformOrderTransferError):
    ids: list[str] = field(init=False)
    graphql_ids: list[str] = field(init=False)
    _error: InitVar[InternalPlatformDiscountSharePoliciesNotFoundError]

    def __post_init__(self, _error: InternalPlatformDiscountSharePoliciesNotFoundError) -> None:
        self.ids = _error.ids
        self.graphql_ids = _error.graphql_ids
        self.message = _error.message

@dataclass
class PlatformPaymentNotFoundError(CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError):
    _error: InitVar[InternalPlatformPaymentNotFoundError]

    def __post_init__(self, _error: InternalPlatformPaymentNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformProductIdDuplicatedError(CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError):
    id: str = field(init=False)
    _error: InitVar[InternalPlatformProductIdDuplicatedError]

    def __post_init__(self, _error: InternalPlatformProductIdDuplicatedError) -> None:
        self.id = _error.id
        self.message = _error.message

@dataclass
class PlatformSettlementAmountExceededError(CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError):
    """정산 가능한 금액을 초과한 경우
    """
    product_id: Optional[str] = field(init=False)
    requested_amount: int = field(init=False)
    allowed_amount: int = field(init=False)
    _error: InitVar[InternalPlatformSettlementAmountExceededError]

    def __post_init__(self, _error: InternalPlatformSettlementAmountExceededError) -> None:
        self.message = _error.message
        self.product_id = _error.product_id
        self.requested_amount = _error.requested_amount
        self.allowed_amount = _error.allowed_amount

@dataclass
class PlatformSettlementDateEarlierThanSettlementStartDateError(CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError):
    """정산일이 정산 시작일보다 빠른 경우
    """
    settlement_start_date: str = field(init=False)
    settlement_date: str = field(init=False)
    _error: InitVar[InternalPlatformSettlementDateEarlierThanSettlementStartDateError]

    def __post_init__(self, _error: InternalPlatformSettlementDateEarlierThanSettlementStartDateError) -> None:
        self.message = _error.message
        self.settlement_start_date = _error.settlement_start_date
        self.settlement_date = _error.settlement_date

@dataclass
class PlatformSettlementParameterNotFoundError(CreatePlatformOrderTransferError):
    """정산 파라미터가 존재하지 않는 경우
    """
    _error: InitVar[InternalPlatformSettlementParameterNotFoundError]

    def __post_init__(self, _error: InternalPlatformSettlementParameterNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformSettlementPaymentAmountExceededPortOnePaymentError(CreatePlatformOrderTransferError):
    """정산 요청 결제 금액이 포트원 결제 내역의 결제 금액을 초과한 경우
    """
    registered_settlement_payment_amount: int = field(init=False)
    request_settlement_payment_amount: int = field(init=False)
    port_one_payment_amount: int = field(init=False)
    _error: InitVar[InternalPlatformSettlementPaymentAmountExceededPortOnePaymentError]

    def __post_init__(self, _error: InternalPlatformSettlementPaymentAmountExceededPortOnePaymentError) -> None:
        self.registered_settlement_payment_amount = _error.registered_settlement_payment_amount
        self.request_settlement_payment_amount = _error.request_settlement_payment_amount
        self.port_one_payment_amount = _error.port_one_payment_amount
        self.message = _error.message

@dataclass
class PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError(CreatePlatformOrderTransferError):
    """정산 요청 공급대가가 포트원 결제 내역의 공급대가를 초과한 경우
    """
    registered_settlement_supply_with_vat_amount: int = field(init=False)
    request_settlement_supply_with_vat_amount: int = field(init=False)
    port_one_supply_with_vat_amount: int = field(init=False)
    _error: InitVar[InternalPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError]

    def __post_init__(self, _error: InternalPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError) -> None:
        self.registered_settlement_supply_with_vat_amount = _error.registered_settlement_supply_with_vat_amount
        self.request_settlement_supply_with_vat_amount = _error.request_settlement_supply_with_vat_amount
        self.port_one_supply_with_vat_amount = _error.port_one_supply_with_vat_amount
        self.message = _error.message

@dataclass
class PlatformSettlementTaxFreeAmountExceededPortOnePaymentError(CreatePlatformOrderTransferError):
    """정산 요청 면세 금액이 포트원 결제 내역의 면세 금액을 초과한 경우
    """
    registered_settlement_tax_free_amount: int = field(init=False)
    request_settlement_tax_free_amount: int = field(init=False)
    port_one_tax_free_amount: int = field(init=False)
    _error: InitVar[InternalPlatformSettlementTaxFreeAmountExceededPortOnePaymentError]

    def __post_init__(self, _error: InternalPlatformSettlementTaxFreeAmountExceededPortOnePaymentError) -> None:
        self.registered_settlement_tax_free_amount = _error.registered_settlement_tax_free_amount
        self.request_settlement_tax_free_amount = _error.request_settlement_tax_free_amount
        self.port_one_tax_free_amount = _error.port_one_tax_free_amount
        self.message = _error.message

@dataclass
class PlatformTransferAlreadyExistsError(CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError):
    transfer_id: str = field(init=False)
    transfer_graphql_id: str = field(init=False)
    _error: InitVar[InternalPlatformTransferAlreadyExistsError]

    def __post_init__(self, _error: InternalPlatformTransferAlreadyExistsError) -> None:
        self.transfer_id = _error.transfer_id
        self.transfer_graphql_id = _error.transfer_graphql_id
        self.message = _error.message

@dataclass
class PlatformCancellableAmountExceededError(CreatePlatformOrderCancelTransferError):
    """취소 가능한 금액이 초과한 경우
    """
    cancellable_amount: int = field(init=False)
    request_amount: int = field(init=False)
    amount_type: PlatformCancellableAmountType = field(init=False)
    _error: InitVar[InternalPlatformCancellableAmountExceededError]

    def __post_init__(self, _error: InternalPlatformCancellableAmountExceededError) -> None:
        self.cancellable_amount = _error.cancellable_amount
        self.request_amount = _error.request_amount
        self.amount_type = _error.amount_type
        self.message = _error.message

@dataclass
class PlatformCancellableDiscountAmountExceededError(CreatePlatformOrderCancelTransferError):
    discount_share_policy_id: str = field(init=False)
    discount_share_policy_graphql_id: str = field(init=False)
    cancellable_amount: int = field(init=False)
    request_amount: int = field(init=False)
    product_id: Optional[str] = field(init=False)
    _error: InitVar[InternalPlatformCancellableDiscountAmountExceededError]

    def __post_init__(self, _error: InternalPlatformCancellableDiscountAmountExceededError) -> None:
        self.discount_share_policy_id = _error.discount_share_policy_id
        self.discount_share_policy_graphql_id = _error.discount_share_policy_graphql_id
        self.cancellable_amount = _error.cancellable_amount
        self.request_amount = _error.request_amount
        self.product_id = _error.product_id
        self.message = _error.message

@dataclass
class PlatformCancellableDiscountTaxFreeAmountExceededError(CreatePlatformOrderCancelTransferError):
    discount_share_policy_id: str = field(init=False)
    discount_share_policy_graphql_id: str = field(init=False)
    cancellable_amount: int = field(init=False)
    request_amount: int = field(init=False)
    product_id: Optional[str] = field(init=False)
    _error: InitVar[InternalPlatformCancellableDiscountTaxFreeAmountExceededError]

    def __post_init__(self, _error: InternalPlatformCancellableDiscountTaxFreeAmountExceededError) -> None:
        self.discount_share_policy_id = _error.discount_share_policy_id
        self.discount_share_policy_graphql_id = _error.discount_share_policy_graphql_id
        self.cancellable_amount = _error.cancellable_amount
        self.request_amount = _error.request_amount
        self.product_id = _error.product_id
        self.message = _error.message

@dataclass
class PlatformCancellableProductQuantityExceededError(CreatePlatformOrderCancelTransferError):
    product_id: str = field(init=False)
    cancellable_quantity: int = field(init=False)
    _error: InitVar[InternalPlatformCancellableProductQuantityExceededError]

    def __post_init__(self, _error: InternalPlatformCancellableProductQuantityExceededError) -> None:
        self.product_id = _error.product_id
        self.cancellable_quantity = _error.cancellable_quantity
        self.message = _error.message

@dataclass
class PlatformCancellationAndPaymentTypeMismatchedError(CreatePlatformOrderCancelTransferError):
    _error: InitVar[InternalPlatformCancellationAndPaymentTypeMismatchedError]

    def __post_init__(self, _error: InternalPlatformCancellationAndPaymentTypeMismatchedError) -> None:
        self.message = _error.message

@dataclass
class PlatformCancellationNotFoundError(CreatePlatformOrderCancelTransferError):
    _error: InitVar[InternalPlatformCancellationNotFoundError]

    def __post_init__(self, _error: InternalPlatformCancellationNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformCannotSpecifyTransferError(CreatePlatformOrderCancelTransferError):
    """정산 건 식별에 실패한 경우
    """
    _error: InitVar[InternalPlatformCannotSpecifyTransferError]

    def __post_init__(self, _error: InternalPlatformCannotSpecifyTransferError) -> None:
        self.message = _error.message

@dataclass
class PlatformDiscountSharePolicyIdDuplicatedError(CreatePlatformOrderCancelTransferError):
    id: str = field(init=False)
    graphql_id: str = field(init=False)
    _error: InitVar[InternalPlatformDiscountSharePolicyIdDuplicatedError]

    def __post_init__(self, _error: InternalPlatformDiscountSharePolicyIdDuplicatedError) -> None:
        self.id = _error.id
        self.graphql_id = _error.graphql_id
        self.message = _error.message

@dataclass
class PlatformOrderDetailMismatchedError(CreatePlatformOrderCancelTransferError):
    _error: InitVar[InternalPlatformOrderDetailMismatchedError]

    def __post_init__(self, _error: InternalPlatformOrderDetailMismatchedError) -> None:
        self.message = _error.message

@dataclass
class PlatformOrderTransferAlreadyCancelledError(CreatePlatformOrderCancelTransferError):
    _error: InitVar[InternalPlatformOrderTransferAlreadyCancelledError]

    def __post_init__(self, _error: InternalPlatformOrderTransferAlreadyCancelledError) -> None:
        self.message = _error.message

@dataclass
class PlatformProductIdNotFoundError(CreatePlatformOrderCancelTransferError):
    id: str = field(init=False)
    _error: InitVar[InternalPlatformProductIdNotFoundError]

    def __post_init__(self, _error: InternalPlatformProductIdNotFoundError) -> None:
        self.id = _error.id
        self.message = _error.message

@dataclass
class PlatformSettlementCancelAmountExceededPortOneCancelError(CreatePlatformOrderCancelTransferError):
    """정산 취소 요청 금액이 포트원 결제 취소 내역의 취소 금액을 초과한 경우
    """
    registered_settlement_cancel_amount: int = field(init=False)
    request_settlement_cancel_amount: int = field(init=False)
    port_one_cancel_amount: int = field(init=False)
    amount_type: PlatformPortOnePaymentCancelAmountType = field(init=False)
    _error: InitVar[InternalPlatformSettlementCancelAmountExceededPortOneCancelError]

    def __post_init__(self, _error: InternalPlatformSettlementCancelAmountExceededPortOneCancelError) -> None:
        self.registered_settlement_cancel_amount = _error.registered_settlement_cancel_amount
        self.request_settlement_cancel_amount = _error.request_settlement_cancel_amount
        self.port_one_cancel_amount = _error.port_one_cancel_amount
        self.amount_type = _error.amount_type
        self.message = _error.message

@dataclass
class PlatformTransferDiscountSharePolicyNotFoundError(CreatePlatformOrderCancelTransferError):
    discount_share_policy_id: str = field(init=False)
    discount_share_policy_graphql_id: str = field(init=False)
    product_id: Optional[str] = field(init=False)
    _error: InitVar[InternalPlatformTransferDiscountSharePolicyNotFoundError]

    def __post_init__(self, _error: InternalPlatformTransferDiscountSharePolicyNotFoundError) -> None:
        self.discount_share_policy_id = _error.discount_share_policy_id
        self.discount_share_policy_graphql_id = _error.discount_share_policy_graphql_id
        self.product_id = _error.product_id
        self.message = _error.message

@dataclass
class PlatformTransferNotFoundError(CreatePlatformOrderCancelTransferError, DeletePlatformTransferError, GetPlatformTransferError):
    _error: InitVar[InternalPlatformTransferNotFoundError]

    def __post_init__(self, _error: InternalPlatformTransferNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PlatformCancelOrderTransfersExistsError(DeletePlatformTransferError):
    _error: InitVar[InternalPlatformCancelOrderTransfersExistsError]

    def __post_init__(self, _error: InternalPlatformCancelOrderTransfersExistsError) -> None:
        self.message = _error.message

@dataclass
class PlatformTransferNonDeletableStatusError(DeletePlatformTransferError):
    _error: InitVar[InternalPlatformTransferNonDeletableStatusError]

    def __post_init__(self, _error: InternalPlatformTransferNonDeletableStatusError) -> None:
        self.message = _error.message

@dataclass
class AlreadyPaidError(ConfirmPaymentError, PayInstantlyError, PayWithBillingKeyError, PreRegisterPaymentError):
    """결제가 이미 완료된 경우
    """
    _error: InitVar[InternalAlreadyPaidError]

    def __post_init__(self, _error: InternalAlreadyPaidError) -> None:
        self.message = _error.message

@dataclass
class BillingKeyAlreadyDeletedError(CreatePaymentScheduleError, DeleteBillingKeyError, PayWithBillingKeyError, RevokePaymentSchedulesError):
    """빌링키가 이미 삭제된 경우
    """
    _error: InitVar[InternalBillingKeyAlreadyDeletedError]

    def __post_init__(self, _error: InternalBillingKeyAlreadyDeletedError) -> None:
        self.message = _error.message

@dataclass
class BillingKeyNotFoundError(ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError, CreatePaymentScheduleError, DeleteBillingKeyError, GetBillingKeyInfoError, PayWithBillingKeyError, RevokePaymentSchedulesError):
    """빌링키가 존재하지 않는 경우
    """
    _error: InitVar[InternalBillingKeyNotFoundError]

    def __post_init__(self, _error: InternalBillingKeyNotFoundError) -> None:
        self.message = _error.message

@dataclass
class ChannelNotFoundError(IssueBillingKeyError, IssueCashReceiptError, PayInstantlyError, PayWithBillingKeyError, SendIdentityVerificationError):
    """요청된 채널이 존재하지 않는 경우
    """
    _error: InitVar[InternalChannelNotFoundError]

    def __post_init__(self, _error: InternalChannelNotFoundError) -> None:
        self.message = _error.message

@dataclass
class DiscountAmountExceedsTotalAmountError(PayInstantlyError, PayWithBillingKeyError):
    """프로모션 할인 금액이 결제 시도 금액 이상인 경우
    """
    _error: InitVar[InternalDiscountAmountExceedsTotalAmountError]

    def __post_init__(self, _error: InternalDiscountAmountExceedsTotalAmountError) -> None:
        self.message = _error.message

@dataclass
class MaxTransactionCountReachedError(PayInstantlyError, PayWithBillingKeyError, SendIdentityVerificationError):
    """결제 혹은 본인인증 시도 횟수가 최대에 도달한 경우
    """
    _error: InitVar[InternalMaxTransactionCountReachedError]

    def __post_init__(self, _error: InternalMaxTransactionCountReachedError) -> None:
        self.message = _error.message

@dataclass
class PaymentScheduleAlreadyExistsError(CreatePaymentScheduleError, DeleteBillingKeyError, PayInstantlyError, PayWithBillingKeyError):
    """결제 예약건이 이미 존재하는 경우
    """
    _error: InitVar[InternalPaymentScheduleAlreadyExistsError]

    def __post_init__(self, _error: InternalPaymentScheduleAlreadyExistsError) -> None:
        self.message = _error.message

@dataclass
class PgProviderError(ApplyEscrowLogisticsError, CancelCashReceiptError, CancelPaymentError, CloseVirtualAccountError, ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError, ConfirmEscrowError, ConfirmIdentityVerificationError, ConfirmPaymentError, DeleteBillingKeyError, IssueBillingKeyError, IssueCashReceiptError, ModifyEscrowLogisticsError, PayInstantlyError, PayWithBillingKeyError, RegisterStoreReceiptError, ResendIdentityVerificationError, SendIdentityVerificationError):
    """PG사에서 오류를 전달한 경우
    """
    pg_code: str = field(init=False)
    pg_message: str = field(init=False)
    _error: InitVar[InternalPgProviderError]

    def __post_init__(self, _error: InternalPgProviderError) -> None:
        self.message = _error.message
        self.pg_code = _error.pg_code
        self.pg_message = _error.pg_message

@dataclass
class PromotionPayMethodDoesNotMatchError(PayInstantlyError, PayWithBillingKeyError):
    """결제수단이 프로모션에 지정된 것과 일치하지 않는 경우
    """
    _error: InitVar[InternalPromotionPayMethodDoesNotMatchError]

    def __post_init__(self, _error: InternalPromotionPayMethodDoesNotMatchError) -> None:
        self.message = _error.message

@dataclass
class SumOfPartsExceedsTotalAmountError(CreatePaymentScheduleError, PayInstantlyError, PayWithBillingKeyError):
    """면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
    """
    _error: InitVar[InternalSumOfPartsExceedsTotalAmountError]

    def __post_init__(self, _error: InternalSumOfPartsExceedsTotalAmountError) -> None:
        self.message = _error.message

@dataclass
class CancellableAmountConsistencyBrokenError(CancelPaymentError):
    """취소 가능 잔액 검증에 실패한 경우
    """
    _error: InitVar[InternalCancellableAmountConsistencyBrokenError]

    def __post_init__(self, _error: InternalCancellableAmountConsistencyBrokenError) -> None:
        self.message = _error.message

@dataclass
class CancelAmountExceedsCancellableAmountError(CancelPaymentError):
    """결제 취소 금액이 취소 가능 금액을 초과한 경우
    """
    _error: InitVar[InternalCancelAmountExceedsCancellableAmountError]

    def __post_init__(self, _error: InternalCancelAmountExceedsCancellableAmountError) -> None:
        self.message = _error.message

@dataclass
class CancelTaxAmountExceedsCancellableTaxAmountError(CancelPaymentError):
    """취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우
    """
    _error: InitVar[InternalCancelTaxAmountExceedsCancellableTaxAmountError]

    def __post_init__(self, _error: InternalCancelTaxAmountExceedsCancellableTaxAmountError) -> None:
        self.message = _error.message

@dataclass
class CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError(CancelPaymentError):
    """취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우
    """
    _error: InitVar[InternalCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError]

    def __post_init__(self, _error: InternalCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError) -> None:
        self.message = _error.message

@dataclass
class NegativePromotionAdjustedCancelAmountError(CancelPaymentError):
    """프로모션에 의해 조정된 취소 금액이 음수인 경우
    """
    _error: InitVar[InternalNegativePromotionAdjustedCancelAmountError]

    def __post_init__(self, _error: InternalNegativePromotionAdjustedCancelAmountError) -> None:
        self.message = _error.message

@dataclass
class PaymentAlreadyCancelledError(CancelPaymentError):
    """결제가 이미 취소된 경우
    """
    _error: InitVar[InternalPaymentAlreadyCancelledError]

    def __post_init__(self, _error: InternalPaymentAlreadyCancelledError) -> None:
        self.message = _error.message

@dataclass
class PaymentNotFoundError(ApplyEscrowLogisticsError, CancelPaymentError, CloseVirtualAccountError, ConfirmEscrowError, ConfirmPaymentError, GetPaymentError, GetPaymentTransactionsError, ModifyEscrowLogisticsError, RegisterStoreReceiptError, ResendWebhookError):
    """결제 건이 존재하지 않는 경우
    """
    _error: InitVar[InternalPaymentNotFoundError]

    def __post_init__(self, _error: InternalPaymentNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PaymentNotPaidError(ApplyEscrowLogisticsError, CancelPaymentError, ConfirmEscrowError, ModifyEscrowLogisticsError, RegisterStoreReceiptError):
    """결제가 완료되지 않은 경우
    """
    _error: InitVar[InternalPaymentNotPaidError]

    def __post_init__(self, _error: InternalPaymentNotPaidError) -> None:
        self.message = _error.message

@dataclass
class PromotionDiscountRetainOptionShouldNotBeChangedError(CancelPaymentError):
    """프로모션 혜택 유지 옵션을 이전 부분 취소와 다른 것으로 입력한 경우
    """
    _error: InitVar[InternalPromotionDiscountRetainOptionShouldNotBeChangedError]

    def __post_init__(self, _error: InternalPromotionDiscountRetainOptionShouldNotBeChangedError) -> None:
        self.message = _error.message

@dataclass
class SumOfPartsExceedsCancelAmountError(CancelPaymentError):
    """면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우
    """
    _error: InitVar[InternalSumOfPartsExceedsCancelAmountError]

    def __post_init__(self, _error: InternalSumOfPartsExceedsCancelAmountError) -> None:
        self.message = _error.message

@dataclass
class InformationMismatchError(ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError, ConfirmPaymentError):
    """정보가 일치하지 않는 경우
    """
    _error: InitVar[InternalInformationMismatchError]

    def __post_init__(self, _error: InternalInformationMismatchError) -> None:
        self.message = _error.message

@dataclass
class InvalidPaymentTokenError(ConfirmPaymentError):
    """유효하지 않은 결제 토큰인 경우
    """
    _error: InitVar[InternalInvalidPaymentTokenError]

    def __post_init__(self, _error: InternalInvalidPaymentTokenError) -> None:
        self.message = _error.message

@dataclass
class MaxWebhookRetryCountReachedError(ResendWebhookError):
    """동일한 webhook id에 대한 수동 재시도 횟수가 최대에 도달한 경우
    """
    _error: InitVar[InternalMaxWebhookRetryCountReachedError]

    def __post_init__(self, _error: InternalMaxWebhookRetryCountReachedError) -> None:
        self.message = _error.message

@dataclass
class WebhookNotFoundError(ResendWebhookError):
    """웹훅 내역이 존재하지 않는 경우
    """
    _error: InitVar[InternalWebhookNotFoundError]

    def __post_init__(self, _error: InternalWebhookNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PaymentNotWaitingForDepositError(CloseVirtualAccountError):
    """결제 건이 입금 대기 상태가 아닌 경우
    """
    _error: InitVar[InternalPaymentNotWaitingForDepositError]

    def __post_init__(self, _error: InternalPaymentNotWaitingForDepositError) -> None:
        self.message = _error.message

@dataclass
class ChannelSpecificError(DeleteBillingKeyError, IssueBillingKeyError):
    """여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우
    """
    failures: list[ChannelSpecificFailure] = field(init=False)
    succeeded_channels: list[SelectedChannel] = field(init=False)
    _error: InitVar[InternalChannelSpecificError]

    def __post_init__(self, _error: InternalChannelSpecificError) -> None:
        self.message = _error.message
        self.failures = _error.failures
        self.succeeded_channels = _error.succeeded_channels

@dataclass
class BillingKeyAlreadyIssuedError(ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError):
    _error: InitVar[InternalBillingKeyAlreadyIssuedError]

    def __post_init__(self, _error: InternalBillingKeyAlreadyIssuedError) -> None:
        self.message = _error.message

@dataclass
class BillingKeyNotIssuedError(DeleteBillingKeyError):
    _error: InitVar[InternalBillingKeyNotIssuedError]

    def __post_init__(self, _error: InternalBillingKeyNotIssuedError) -> None:
        self.message = _error.message

@dataclass
class CashReceiptAlreadyIssuedError(IssueCashReceiptError):
    """현금영수증이 이미 발급된 경우
    """
    _error: InitVar[InternalCashReceiptAlreadyIssuedError]

    def __post_init__(self, _error: InternalCashReceiptAlreadyIssuedError) -> None:
        self.message = _error.message

@dataclass
class CashReceiptNotFoundError(CancelCashReceiptError, GetCashReceiptError):
    """현금영수증이 존재하지 않는 경우
    """
    _error: InitVar[InternalCashReceiptNotFoundError]

    def __post_init__(self, _error: InternalCashReceiptNotFoundError) -> None:
        self.message = _error.message

@dataclass
class CashReceiptNotIssuedError(CancelCashReceiptError):
    """현금영수증이 발급되지 않은 경우
    """
    _error: InitVar[InternalCashReceiptNotIssuedError]

    def __post_init__(self, _error: InternalCashReceiptNotIssuedError) -> None:
        self.message = _error.message

@dataclass
class PaymentScheduleNotFoundError(GetPaymentScheduleError, RevokePaymentSchedulesError):
    """결제 예약건이 존재하지 않는 경우
    """
    _error: InitVar[InternalPaymentScheduleNotFoundError]

    def __post_init__(self, _error: InternalPaymentScheduleNotFoundError) -> None:
        self.message = _error.message

@dataclass
class PaymentScheduleAlreadyProcessedError(RevokePaymentSchedulesError):
    """결제 예약건이 이미 처리된 경우
    """
    _error: InitVar[InternalPaymentScheduleAlreadyProcessedError]

    def __post_init__(self, _error: InternalPaymentScheduleAlreadyProcessedError) -> None:
        self.message = _error.message

@dataclass
class PaymentScheduleAlreadyRevokedError(RevokePaymentSchedulesError):
    """결제 예약건이 이미 취소된 경우
    """
    _error: InitVar[InternalPaymentScheduleAlreadyRevokedError]

    def __post_init__(self, _error: InternalPaymentScheduleAlreadyRevokedError) -> None:
        self.message = _error.message

@dataclass
class AlreadyPaidOrWaitingError(CreatePaymentScheduleError):
    """결제가 이미 완료되었거나 대기중인 경우
    """
    _error: InitVar[InternalAlreadyPaidOrWaitingError]

    def __post_init__(self, _error: InternalAlreadyPaidOrWaitingError) -> None:
        self.message = _error.message

@dataclass
class PromotionNotFoundError(GetPromotionError):
    """프로모션이 존재하지 않는 경우
    """
    _error: InitVar[InternalPromotionNotFoundError]

    def __post_init__(self, _error: InternalPromotionNotFoundError) -> None:
        self.message = _error.message

@dataclass
class IdentityVerificationAlreadyVerifiedError(ConfirmIdentityVerificationError, ResendIdentityVerificationError, SendIdentityVerificationError):
    """본인인증 건이 이미 인증 완료된 상태인 경우
    """
    _error: InitVar[InternalIdentityVerificationAlreadyVerifiedError]

    def __post_init__(self, _error: InternalIdentityVerificationAlreadyVerifiedError) -> None:
        self.message = _error.message

@dataclass
class IdentityVerificationNotFoundError(ConfirmIdentityVerificationError, GetIdentityVerificationError, ResendIdentityVerificationError, SendIdentityVerificationError):
    """요청된 본인인증 건이 존재하지 않는 경우
    """
    _error: InitVar[InternalIdentityVerificationNotFoundError]

    def __post_init__(self, _error: InternalIdentityVerificationNotFoundError) -> None:
        self.message = _error.message

@dataclass
class IdentityVerificationNotSentError(ConfirmIdentityVerificationError, ResendIdentityVerificationError):
    """본인인증 건이 API로 요청된 상태가 아닌 경우
    """
    _error: InitVar[InternalIdentityVerificationNotSentError]

    def __post_init__(self, _error: InternalIdentityVerificationNotSentError) -> None:
        self.message = _error.message

@dataclass
class IdentityVerificationAlreadySentError(SendIdentityVerificationError):
    """본인인증 건이 이미 API로 요청된 상태인 경우
    """
    _error: InitVar[InternalIdentityVerificationAlreadySentError]

    def __post_init__(self, _error: InternalIdentityVerificationAlreadySentError) -> None:
        self.message = _error.message
@dataclass
class UnknownError(LoginViaApiSecretError, RefreshTokenError, AttachB2bTaxInvoiceFileError, CancelB2bTaxInvoiceIssuanceError, CancelB2bTaxInvoiceRequestError, CreateB2bFileUploadUrlError, DeleteB2bTaxInvoiceAttachmentError, DeleteB2bTaxInvoiceError, DownloadB2bTaxInvoicesSheetError, DraftB2bTaxInvoiceError, GetB2bBulkTaxInvoiceError, GetB2bTaxInvoiceAttachmentsError, GetB2bTaxInvoiceError, GetB2bTaxInvoicePdfDownloadUrlError, GetB2bTaxInvoicePopupUrlError, GetB2bTaxInvoicePrintUrlError, GetB2bTaxInvoicesError, IssueB2bTaxInvoiceError, IssueB2bTaxInvoiceImmediatelyError, RefuseB2bTaxInvoiceRequestError, RequestB2bTaxInvoiceReverseIssuanceError, SendToNtsB2bTaxInvoiceError, UpdateB2bTaxInvoiceDraftError, requestB2bTaxInvoiceError, ConfirmIdentityVerificationError, GetIdentityVerificationError, GetIdentityVerificationsError, ResendIdentityVerificationError, SendIdentityVerificationError, ConfirmBillingKeyError, ConfirmBillingKeyIssueAndPayError, DeleteBillingKeyError, GetBillingKeyInfoError, GetBillingKeyInfosError, IssueBillingKeyError, CancelCashReceiptError, GetCashReceiptError, GetCashReceiptsError, IssueCashReceiptError, ApplyEscrowLogisticsError, CancelPaymentError, CloseVirtualAccountError, ConfirmEscrowError, ConfirmPaymentError, GetAllPaymentEventsError, GetAllPaymentsError, GetPaymentError, GetPaymentTransactionsError, GetPaymentsError, ModifyEscrowLogisticsError, PayInstantlyError, PayWithBillingKeyError, PreRegisterPaymentError, RegisterStoreReceiptError, ResendWebhookError, CreatePaymentScheduleError, GetPaymentScheduleError, GetPaymentSchedulesError, RevokePaymentSchedulesError, GetPromotionError, GetKakaopayPaymentOrderError, GetPlatformAccountHolderError, GetPlatformAccountTransfersError, GetPlatformBulkAccountTransfersError, GetPlatformBulkPayoutsError, GetB2bBusinessInfosError, GetPlatformCompanyStateError, CancelPlatformAdditionalFeePolicyScheduleError, CancelPlatformContractScheduleError, CancelPlatformDiscountSharePolicyScheduleError, CancelPlatformPartnerScheduleError, GetPlatformAdditionalFeePolicyScheduleError, GetPlatformContractScheduleError, GetPlatformDiscountSharePolicyFilterOptionsError, GetPlatformDiscountSharePolicyScheduleError, GetPlatformError, GetPlatformPartnerFilterOptionsError, GetPlatformPartnerScheduleError, GetPlatformSettingError, RescheduleAdditionalFeePolicyError, RescheduleContractError, RescheduleDiscountSharePolicyError, ReschedulePartnerError, ScheduleAdditionalFeePolicyError, ScheduleContractError, ScheduleDiscountSharePolicyError, SchedulePartnerError, SchedulePlatformPartnersError, UpdatePlatformSettingError, ArchivePlatformPartnerError, ConnectBulkPartnerMemberCompanyError, ConnectPartnerMemberCompanyError, CreatePlatformPartnerError, CreatePlatformPartnersError, DisconnectBulkPartnerMemberCompanyError, DisconnectPartnerMemberCompanyError, GetPlatformPartnerError, GetPlatformPartnersError, RecoverPlatformPartnerError, UpdatePlatformPartnerError, GetPlatformPartnerSettlementsError, GetPlatformPayoutsError, ArchivePlatformAdditionalFeePolicyError, ArchivePlatformContractError, ArchivePlatformDiscountSharePolicyError, CreatePlatformAdditionalFeePolicyError, CreatePlatformContractError, CreatePlatformDiscountSharePolicyError, GetPlatformAdditionalFeePoliciesError, GetPlatformAdditionalFeePolicyError, GetPlatformContractError, GetPlatformContractsError, GetPlatformDiscountSharePoliciesError, GetPlatformDiscountSharePolicyError, RecoverPlatformAdditionalFeePolicyError, RecoverPlatformContractError, RecoverPlatformDiscountSharePolicyError, UpdatePlatformAdditionalFeePolicyError, UpdatePlatformContractError, UpdatePlatformDiscountSharePolicyError, CreatePlatformManualTransferError, CreatePlatformOrderCancelTransferError, CreatePlatformOrderTransferError, DeletePlatformTransferError, DownloadPlatformTransferSheetError, GetPlatformTransferError, GetPlatformTransferSummariesError):
    """알 수 없는 경우"""
    message: Optional[str] = field(default="알 수 없는 오류가 발생했습니다.", init=False)
    error: dict
