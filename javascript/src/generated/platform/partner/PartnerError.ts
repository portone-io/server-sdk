import type { Unrecognized } from "../../../utils/unrecognized"
import { PlatformError } from "../PlatformError"
import type { ForbiddenError } from "../../common/ForbiddenError"
import type { InvalidRequestError } from "../../common/InvalidRequestError"
import type { PlatformAccountVerificationAlreadyUsedError } from "../../platform/PlatformAccountVerificationAlreadyUsedError"
import type { PlatformAccountVerificationFailedError } from "../../platform/PlatformAccountVerificationFailedError"
import type { PlatformAccountVerificationNotFoundError } from "../../platform/PlatformAccountVerificationNotFoundError"
import type { PlatformArchivedPartnerError } from "../../platform/PlatformArchivedPartnerError"
import type { PlatformCannotArchiveScheduledPartnerError } from "../../platform/partner/PlatformCannotArchiveScheduledPartnerError"
import type { PlatformContractNotFoundError } from "../../platform/PlatformContractNotFoundError"
import type { PlatformContractsNotFoundError } from "../../platform/partner/PlatformContractsNotFoundError"
import type { PlatformCurrencyNotSupportedError } from "../../platform/PlatformCurrencyNotSupportedError"
import type { PlatformInsufficientDataToChangePartnerTypeError } from "../../platform/PlatformInsufficientDataToChangePartnerTypeError"
import type { PlatformNotEnabledError } from "../../platform/PlatformNotEnabledError"
import type { PlatformPartnerIdAlreadyExistsError } from "../../platform/partner/PlatformPartnerIdAlreadyExistsError"
import type { PlatformPartnerIdsAlreadyExistError } from "../../platform/partner/PlatformPartnerIdsAlreadyExistError"
import type { PlatformPartnerIdsDuplicatedError } from "../../platform/partner/PlatformPartnerIdsDuplicatedError"
import type { PlatformPartnerNotFoundError } from "../../platform/PlatformPartnerNotFoundError"
import type { PlatformUserDefinedPropertyNotFoundError } from "../../platform/PlatformUserDefinedPropertyNotFoundError"
import type { UnauthorizedError } from "../../common/UnauthorizedError"
export abstract class PartnerError extends PlatformError {
	declare readonly data: ForbiddenError | InvalidRequestError | PlatformAccountVerificationAlreadyUsedError | PlatformAccountVerificationFailedError | PlatformAccountVerificationNotFoundError | PlatformArchivedPartnerError | PlatformCannotArchiveScheduledPartnerError | PlatformContractNotFoundError | PlatformContractsNotFoundError | PlatformCurrencyNotSupportedError | PlatformInsufficientDataToChangePartnerTypeError | PlatformNotEnabledError | PlatformPartnerIdAlreadyExistsError | PlatformPartnerIdsAlreadyExistError | PlatformPartnerIdsDuplicatedError | PlatformPartnerNotFoundError | PlatformUserDefinedPropertyNotFoundError | UnauthorizedError | { readonly type: Unrecognized }
}
